<types>

    <fieldType name="text" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <!-- in this example, we will only use synonyms at query time
            <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
            -->
            <!-- Case insensitive stop word removal.
              add enablePositionIncrements=true in both the index and query
              analyzers to leave a 'gap' for more accurate phrase queries.
            -->
            <filter class="solr.StopFilterFactory"
                    ignoreCase="true"
                    words="stopwords.txt"
                    />
            <filter class="solr.WordDelimiterFilterFactory"
                    protected="protwords.txt"
                    generateWordParts="1"
                    generateNumberParts="1"
                    catenateWords="1"
                    catenateNumbers="1"
                    catenateAll="0"
                    splitOnCaseChange="0"
                    preserveOriginal="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory"
                    ignoreCase="true"
                    words="stopwords.txt"
                    />
            <filter class="solr.WordDelimiterFilterFactory"
                    protected="protwords.txt"
                    generateWordParts="1"
                    generateNumberParts="1"
                    catenateWords="0"
                    catenateNumbers="0"
                    catenateAll="0"
                    splitOnCaseChange="0"
                    preserveOriginal="1"/>
            <filter class="solr.LengthFilterFactory" min="2" max="100"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType>

    <!--  Setup simple analysis for spell checking -->

    <fieldType name="textSpell" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
            <filter class="solr.LengthFilterFactory" min="4" max="20"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType>

    <!-- Case Sensitive white space tokenizer text field type -->
    <fieldType name="text_ws_case" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        </analyzer>
    </fieldType>

    <!-- A text tokenizer that splits on whitespace only and also takes into account non-ascii characters -->
    <fieldType name="text_ws_na" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <!--<tokenizer class="solr.StandardTokenizerFactory"/>-->
            <filter class="solr.ASCIIFoldingFilterFactory"/>
            <filter class="solr.WordDelimiterFilterFactory" splitOnNumerics="0" splitOnCaseChange="0"/>
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>



    <!-- I created the text_ws_finer field type to the best of my ability to handle keywords with colons and text tokenizing in general-->
    <fieldType name="text_ws_finer" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <tokenizer class="solr.PatternTokenizerFactory" pattern="[\s,]"/>
            <!--If a time comes where this fails for non-ascii characters, can use the ASCIIFoldingFactory before the patter filters-->
            <filter class="solr.PatternReplaceFilterFactory" pattern="[^\w\d]*([\w\d]+:[\w\d]+)[^\w\d]*"
                    replacement="$1"/>
            <filter class="solr.PatternReplaceFilterFactory" pattern="[^\w\d]*([\w\d]+)[^\w\d]*" replacement="$1"/>
            <!--Could do this one only at index time probably-->
            <!--<filter class="solr.PatternReplaceFilterFactory" pattern="^\p{Punct}*(.*?)\p{Punct}*$" replacement="$1" preserve_original="false"/>-->
            <!--<filter class="solr.WordDelimiterFilterFactory" splitOnNumerics="0" splitOnCaseChange="0" generateWordParts="0" generateNumberParts="0" catenateWords="0" catenateNumbers="0" catenateAll="0" preserveOriginal="1"/>-->
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.PatternTokenizerFactory" pattern="[\s,]"/>
            <filter class="solr.PatternReplaceFilterFactory" pattern="[^\w\d]*([\w\d]+)[^\w\d]*" replacement="$1"/>
            <!--<filter class="solr.WordDelimiterFilterFactory"
            splitOnNumerics="0" splitOnCaseChange="0"
            generateWordParts="1" generateNumberParts="1" catenateWords="1"
            catenateNumbers="1" catenateAll="0" preserveOriginal="1"/>-->
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>

    <!-- charFilter + WhitespaceTokenizer  -->
    <!--
    <fieldType name="text_char_norm" class="solr.TextField" positionIncrementGap="100" >
      <analyzer>
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldType>
    -->

    <!-- This is an example of using the KeywordTokenizer along
         With various TokenFilterFactories to produce a sortable field
         that does not include some properties of the source text
      -->
    <fieldType name="alphaOnlySort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
        <analyzer>
            <!-- KeywordTokenizer does no actual tokenizing, so the entire
                 input string is preserved as a single token
              -->
            <tokenizer class="solr.KeywordTokenizerFactory"/>
            <!-- The LowerCase TokenFilter does what you expect, which can be
                 when you want your sorting to be case insensitive
              -->
            <filter class="solr.LowerCaseFilterFactory"/>
            <!-- The TrimFilter removes any leading or trailing whitespace -->
            <filter class="solr.TrimFilterFactory"/>
            <!-- The PatternReplaceFilter gives you the flexibility to use
                 Java Regular expression to replace any sequence of characters
                 matching a pattern with an arbitrary replacement string,
                 which may include back references to portions of the original
                 string matched by the pattern.

                 See the Java Regular Expression documentation for more
                 information on pattern and replacement string syntax.

                 http://java.sun.com/j2se/1.6.0/docs/api/java/util/regex/package-summary.html
              -->
            <filter class="solr.PatternReplaceFilterFactory"
                    pattern="([^a-z])" replacement="" replace="all"
                    />
        </analyzer>
    </fieldType>

    <fieldtype name="phonetic" stored="false" indexed="true" class="solr.TextField">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
        </analyzer>
    </fieldtype>

    <fieldtype name="payloads" stored="false" indexed="true" class="solr.TextField">
        <analyzer>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <!--
            The DelimitedPayloadTokenFilter can put payloads on tokens... for example,
            a token of "foo|1.4"  would be indexed as "foo" with a payload of 1.4f
            Attributes of the DelimitedPayloadTokenFilterFactory :
             "delimiter" - a one character delimiter. Default is | (pipe)
         "encoder" - how to encode the following value into a playload
            float -> org.apache.lucene.analysis.payloads.FloatEncoder,
            integer -> o.a.l.a.p.IntegerEncoder
            identity -> o.a.l.a.p.IdentityEncoder
                Fully Qualified class name implementing PayloadEncoder, Encoder must have a no arg constructor.
             -->
            <filter class="solr.DelimitedPayloadTokenFilterFactory" encoder="float"/>
        </analyzer>
    </fieldtype>

    <!-- string field to handle non-ascii characters. -->
    <fieldtype name="string_na" class="solr.TextField" omitNorms="true">
        <analyzer>
            <tokenizer class="solr.KeywordTokenizerFactory"/>
        </analyzer>
    </fieldtype>

    <!-- case insensitive strfield -->
    <fieldType name="string_ci" class="solr.TextField" omitNorms="true">
        <analyzer>
            <tokenizer class="solr.KeywordTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.ASCIIFoldingFilterFactory"/>
        </analyzer>
    </fieldType>

    <fieldType name="rdate" class="solr.DateRangeField" multiValued="false"/>
    <fieldType name="rdates" class="solr.DateRangeField" multiValued="true"/>


</types>
