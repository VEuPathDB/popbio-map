function initializeMap() {
    map = L.map("map", {center: [23.079, 3.515], zoom: 3, zoomControl: false});
    map.spin(true);
    map.addControl(new L.Control.FullScreen({position: "topright", forcePseudoFullscreen: true}));
    map.addControl(new L.Control.ZoomMin({position: "topright"}));
    sidebar = L.control.sidebar("sidebar").addTo(map);
    var c = new L.tileLayer("http://{s}.mqcdn.com/tiles/1.0.0/map/{z}/{x}/{y}.png", {
        minZoom: 2,
        maxZoom: 15,
        subdomains: ["otile1", "otile2", "otile3", "otile4"],
        noWrap: 1,
        attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="http://mapbox.com">Mapbox</a>'
    });
    var b = new L.tileLayer("http://{s}.mqcdn.com/tiles/1.0.0/sat/{z}/{x}/{y}.png", {
        minZoom: 2,
        maxZoom: 15,
        maxNativeZoom: 11,
        subdomains: ["otile1", "otile2", "otile3", "otile4"],
        noWrap: 1,
        attribution: "Portions Courtesy NASA/JPL-Caltech and U.S. Depart. of Agriculture, Farm Service Agency"
    });
    var a = new L.tileLayer("http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
        minZoom: 2,
        maxZoom: 15,
        noWrap: 1,
        attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="http://mapbox.com">Mapbox</a>'
    });
    map.addLayer(c);
    assetLayerGroup = new L.LayerGroup();
    assetLayerGroup.addTo(map);
    var e = new L.Control.Layers({"MapQuest-OSM": c, OpenStreetMap: a, "MapQuest Open Aerial": b});
    e.setPosition("topright");
    e.addTo(map);
    legend = L.control({position: "bottomright"});
    legendDiv = L.DomUtil.create("div", "info legend");
    L.easyButton("fa-info", function () {
        if (L.DomUtil.hasClass(legendDiv, "active")) {
            legend.removeFrom(map);
            L.DomUtil.removeClass(legendDiv, "active")
        } else {
            legend.addTo(map);
            L.DomUtil.addClass(legendDiv, "active")
        }
    }, "Toggle legend ON of OFF");
    var d = solrPopbioUrl + $("#view-mode").val() + "Palette?q=*&facet.pivot=geohash_2,species_category&json.wrf=?&callback=?";
    $.getJSON(d, generatePalette);
    map.spin(false)
}
function initializeSearch() {
    $("#reset-search").click(function () {
        $("#search_ac").tagsinput("removeAll");
        resetPlots();
        filterMarkers("")
    });
    $("#toggle-world").click(function () {
        if ($("#world-search").val() === "1") {
            $("#toggle-world").toggleClass("btn-primary", false).attr("title", "Enable global search suggestions");
            $("#world-search").val("0");
            $("#world-icon").css("color", "#265a88")
        } else {
            $("#toggle-world").toggleClass("btn-primary", true).attr("title", "Limit search suggestions to current view");
            $("#world-search").val("1");
            $("#world-icon").css("color", "white")
        }
    });
    var a = new Bloodhound({
        datumTokenizer: Bloodhound.tokenizers.whitespace,
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        limit: 7,
        minLength: 2,
        hint: false,
        remote: {
            url: solrTaUrl + $("#view-mode").val() + "Ac?q=",
            ajax: {dataType: "jsonp", data: {wt: "json", rows: 7}, jsonp: "json.wrf"},
            replace: function (d, e) {
                d = solrTaUrl + $("#view-mode").val() + "Ac?q=";
                var c = e.match(/([^@]+)@([^@]*)/);
                if (c != null) {
                    partSearch = c[1];
                    console.log(d + encodeURI(c[1]));
                    if ($("#world-search").val() === "1") {
                        return solrTaUrl + $("#view-mode").val() + "Acat?q=" + encodeURI(c[1])
                    } else {
                        return solrTaUrl + $("#view-mode").val() + "Acat?q=" + encodeURI(c[1]) + buildBbox(map.getBounds())
                    }
                } else {
                    partSearch = false;
                    if ($("#world-search").val() === "1") {
                        return d + encodeURI(e)
                    } else {
                        return d + encodeURI(e) + buildBbox(map.getBounds())
                    }
                }
            },
            filter: function (c) {
                if (partSearch) {
                    return $.map(c.grouped.type.doclist.docs, function (d) {
                        return {value: partSearch, id: d.id, type: d.type, field: d.field, qtype: "partial"}
                    })
                } else {
                    return $.map(c.grouped.textsuggest_category.doclist.docs, function (d) {
                        return {
                            value: d.textsuggest_category,
                            type: d.type,
                            id: d.id,
                            field: d.field,
                            is_synonym: d.is_synonym,
                            qtype: "exact"
                        }
                    })
                }
            }
        }
    });
    a.initialize();
    var b = new Bloodhound({
        datumTokenizer: Bloodhound.tokenizers.whitespace,
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        limit: 10,
        minLength: 3,
        remote: {
            url: solrTaUrl + $("#view-mode").val() + "Acgrouped?q=",
            ajax: {dataType: "jsonp", data: {wt: "json", rows: 10}, jsonp: "json.wrf"},
            replace: function (c, d) {
                c = solrTaUrl + $("#view-mode").val() + "Acgrouped?q=";
                if ($("#world-search").val() === "1") {
                    return c + encodeURI(d) + "*"
                } else {
                    return c + encodeURI(d) + "*" + buildBbox(map.getBounds())
                }
            },
            filter: function (d) {
                var c = d.grouped.stable_id.ngroups;
                return $.map(d.facet_counts.facet_fields.type, function (e) {
                    if (e[1] > 0) {
                        return {
                            count: e[1],
                            type: e[0],
                            field: mapTypeToField(e[0]),
                            value: $("#search_ac").tagsinput("input")[0].value,
                            qtype: "summary"
                        }
                    }
                })
            }
        }
    });
    b.initialize();
    $("#search_ac").tagsinput({
        tagClass: function (c) {
            switch (c.type) {
                case"Taxonomy":
                    return "label label-primary fa fa-sitemap";
                case"Geography":
                    return "label label-primary fa fa-map-marker";
                case"Title":
                    return "label label-success fa fa-tag";
                case"Description":
                    return "label label-success fa fa-info-circle";
                case"Projects":
                    return "label label-success fa fa-database";
                case"Anywhere":
                    return "label label-default fa fa-search";
                case"Pubmed references":
                    return "label label-success fa fa-book";
                case"Insecticides":
                    return "label label-success fa fa-eyedropper";
                case"Collection protocols":
                    return "label label-success fa fa-shopping-cart";
                default:
                    return "label label-warning fa fa-search"
            }
        },
        itemValue: "value",
        itemText: function (c) {
            return " " + c.value
        },
        typeaheadjs: ({
            options: {minLength: 3, hint: false, highlight: false},
            datasets: [{
                name: "acSuggestions",
                displayKey: "value",
                source: a.ttAdapter(),
                templates: {
                    empty: function () {
                        var c;
                        if ($("#world-search").val() === "1") {
                            c = "No results found"
                        } else {
                            c = "No results found. Try enabling world search."
                        }
                        return ['<span class="tt-suggestions" style="display: block;">', '<div class="tt-suggestion">', '<p style="white-space: normal;">', c, "</p>", "</div>", "</span>"].join("\n")
                    }, suggestion: function (c) {
                        return "<p>" + c.value + (c.is_synonym ? ' (<i class="fa fa-list-ul" title="Duplicate term / Synonym" style="cursor: pointer"></i>)' : "") + " <em> in " + c.type + "</em></p>"
                    }
                }
            }, {
                name: "acOtherResults",
                displayKey: "value",
                source: b.ttAdapter(),
                templates: {
                    header: '<h4 class="more-results">More suggestions</h4>', suggestion: function (c) {
                        return "<p>~" + c.count + " <em>in " + c.type + "</em></p>"
                    }
                }
            }]
        })
    });
    $("#SelectView").find("li a").click(function () {
        var d = $(this).text();
        if (d === "Samples view") {
            $(this).parents(".dropdown").find(".dropdown-toggle").html(d + ' <span class="caret"></span>');
            $("#view-mode").val("smpl")
        } else {
            $(this).parents(".dropdown").find(".dropdown-toggle").html('IR phenotypes view <span class="caret"></span>');
            $("#view-mode").val("ir")
        }
        var c = solrPopbioUrl + $("#view-mode").val() + "Palette?q=*&facet.pivot=geohash_2,species_category&json.wrf=?&callback=?";
        resetPlots();
        $.getJSON(c, generatePalette);
        a.initialize(true);
        b.initialize(true)
    })
}
function loadSolr(e) {
    var a = e.clear;
    var f = e.zoomLevel;
    var g = geohashLevel(f, "geohash");
    if (f > 11) {
        loadSmall(1, f);
        return
    }
    var d = [];
    var c = function (x) {
        $("#markersCount").html(x.response.numFound + " samples in current view");
        if (x.response.numFound === 0) {
            if (a) {
                assetLayerGroup.clearLayers()
            }
            map.spin(false);
            return
        }
        var t, w, v, h;
        var p = x.stats.stats_fields;
        var q = x.facet_counts;
        var j = $("#view-mode").val();
        switch (f) {
            case 1:
            case 2:
                t = p.geo_coords_ll_0_coordinate.facets.geohash_1;
                w = p.geo_coords_ll_1_coordinate.facets.geohash_1;
                h = (j === "ir") ? p.phenotype_rescaled_value_f.facets.geohash_1 : null;
                v = q.facet_pivot["geohash_1,species_category"];
                break;
            case 3:
            case 4:
            case 5:
                t = p.geo_coords_ll_0_coordinate.facets.geohash_2;
                w = p.geo_coords_ll_1_coordinate.facets.geohash_2;
                h = ((j === "ir") ? p.phenotype_rescaled_value_f.facets.geohash_2 : null);
                v = q.facet_pivot["geohash_2,species_category"];
                break;
            case 6:
            case 7:
                t = p.geo_coords_ll_0_coordinate.facets.geohash_3;
                w = p.geo_coords_ll_1_coordinate.facets.geohash_3;
                h = ((j === "ir") ? p.phenotype_rescaled_value_f.facets.geohash_3 : null);
                v = q.facet_pivot["geohash_3,species_category"];
                break;
            case 8:
            case 9:
                t = p.geo_coords_ll_0_coordinate.facets.geohash_4;
                w = p.geo_coords_ll_1_coordinate.facets.geohash_4;
                h = (j === "ir") ? p.phenotype_rescaled_value_f.facets.geohash_4 : null;
                v = q.facet_pivot["geohash_4,species_category"];
                break;
            case 10:
            case 11:
                t = p.geo_coords_ll_0_coordinate.facets.geohash_5;
                w = p.geo_coords_ll_1_coordinate.facets.geohash_5;
                h = (j === "ir") ? p.phenotype_rescaled_value_f.facets.geohash_5 : null;
                v = q.facet_pivot["geohash_5,species_category"];
                break;
            default:
                t = p.geo_coords_ll_0_coordinate.facets.geohash_6;
                w = p.geo_coords_ll_1_coordinate.facets.geohash_6;
                h = (j === "ir") ? p.phenotype_rescaled_value_f.facets.geohash_6 : null;
                v = q.facet_pivot["geohash_6,species_category"];
                break
        }
        smallClusters = [];
        var k = [];
        var i = [];
        var s = [];
        for (var r in t) {
            if (t.hasOwnProperty(r)) {
                var n = t[r].count;
                if (n < 2) {
                    smallClusters.push(r);
                    continue
                }
                v.forEach(function (A, B) {
                    k[A.value] = A.count;
                    var z = [];
                    var y = [];
                    if (A.pivot) {
                        A.pivot.forEach(function (D) {
                            var C = D.value, E = D.count;
                            z[C] = E;
                            y.push({
                                label: C.replace(/sensu lato/, "sl").replace(/chromosomal form/, "cf"),
                                value: E,
                                color: (palette[C] ? palette[C] : "#000000")
                            })
                        })
                    } else {
                        console.log("ERROR: Pivot for element " + A.value + "appears to be empty")
                    }
                    i[A.value] = z;
                    s[A.value] = y
                });
                var l = {};
                l.term = r;
                l.count = t[r].count;
                l.latLng = [t[r].mean, w[r].mean];
                l.bounds = [[t[r].min, w[r].min], [t[r].max, w[r].max]];
                l.population = k[r];
                l.trafficlight = (j === "ir") ? h[r].mean : -1;
                l.stats = i[r];
                l.fullstats = s[r];
                d.push(l)
            }
        }
        var o = {};
        o.terms = d;
        var u = {
            recordsField: "terms",
            latitudeField: "latLng.0",
            longitudeField: "latLng.1",
            displayOptions: {
                count: {
                    title: function (y) {
                        return y
                    }
                }
            },
            layerOptions: {fill: false, stroke: false, weight: 0, color: "#80FF00", dropShadow: false},
            setIcon: function (y) {
                var z = 40;
                return new L.Icon.Canvas({
                    iconSize: new L.Point(z, z),
                    className: "marker-cluster",
                    population: y.population,
                    trafficlight: y.trafficlight,
                    stats: y.stats
                })
            },
            onEachRecord: function (z, y) {
                z.on("dblclick", function () {
                    clearTimeout(timer);
                    prevent = true;
                    map.fitBounds(y.bounds);
                    resetPlots()
                });
                z.on("click", function () {
                    removeHighlight(z);
                    highlightMarker(z);
                    timer = setTimeout(function () {
                        if (!prevent) {
                            if ($("#sidebar").hasClass("collapsed")) {
                                sidebar.open($(".sidebar-pane.active").attr("id"))
                            }
                            updatePieChart(y.population, y.fullstats);
                            var A = L.latLngBounds(y.bounds);
                            createBeeViolinPlot("#swarm-chart-area", buildBbox(A));
                            updateTable("#table-contents", buildBbox(A))
                        }
                    }, delay);
                    prevent = false
                })
            }
        };
        var m = new L.MarkerDataLayer(o, u);
        if (a) {
            assetLayerGroup.clearLayers();
            assetLayerGroup.addLayer(m)
        } else {
            assetLayerGroup.addLayer(m)
        }
        if (smallClusters.length > 0) {
            loadSmall(0, f)
        }
        map.spin(false)
    };
    var b = solrPopbioUrl + $("#view-mode").val() + "Geoclust?" + qryUrl + buildBbox(map.getBounds()) + "&stats.facet=" + g + "&facet.pivot=" + g + ",species_category&json.wrf=?&callback=?";
    map.spin(true);
    $.getJSON(b, c).fail(function () {
        console.log("Ahhh");
        map.spin(false)
    })
}
function loadSmall(g, f) {
    var e = new PruneClusterForLeaflet(100);
    e.BuildLeafletClusterIcon = function (i) {
        var j = new L.Icon.MarkerCluster();
        j.stats = i.stats;
        j.population = i.population;
        j.trafficlight = i.totalWeight / i.population;
        return j
    };
    e.PrepareLeafletMarker = function (i, l, k) {
        i.on("dblclick", function () {
            clearTimeout(timer);
            prevent = true;
            resetPlots();
            if (map.getZoom() < 11) {
                map.setView(i._latlng, 11, {animate: true})
            }
        });
        i.on("click", function () {
            removeHighlight(i);
            highlightMarker(i);
            timer = setTimeout(function () {
                if (!prevent) {
                    var m = [];
                    m.push({
                        label: k.replace(/sensu lato/, "sl").replace(/chromosomal form/, "cf"),
                        value: 1,
                        color: (palette[k] ? palette[k] : "#000000")
                    });
                    if ($("#sidebar").hasClass("collapsed")) {
                        sidebar.open($(".sidebar-pane.active").attr("id"))
                    }
                    updatePieChart(1, m);
                    var n = "&fq=id:" + l.id;
                    createBeeViolinPlot("#swarm-chart-area", n);
                    updateTable("#table-contents", n)
                }
                prevent = false
            }, delay)
        });
        if (l.icon) {
            if (typeof l.icon === "function") {
                i.setIcon(l.icon(l, k))
            } else {
                i.setIcon(l.icon)
            }
        }
        if (l.popup) {
            var j = typeof l.popup === "function" ? l.popup(l, k) : l.popup;
            if (i.getPopup()) {
                i.setPopupContent(j, l.popupOptions)
            } else {
                i.bindPopup(j, l.popupOptions)
            }
        }
    };
    L.Icon.MarkerCluster = L.Icon.extend({
        options: {
            iconSize: new L.Point(40, 40),
            className: "prunecluster leaflet-markercluster-icon"
        }, createIcon: function () {
            var j = document.createElement("canvas");
            this._setIconStyles(j, "icon");
            var i = this.options.iconSize;
            j.width = i.x;
            j.height = i.y;
            this.draw(j.getContext("2d"), i.x, i.y);
            return j
        }, createShadow: function () {
            return null
        }, draw: function (k) {
            var n = Math.PI * 2;
            var j = Math.PI * 1.5;
            var o = this.options.iconSize.x, m = o / 2, l = o / 2.5;
            for (var r in this.stats) {
                if (this.stats.hasOwnProperty(r)) {
                    var s = this.stats[r] / this.population;
                    if (s > 0) {
                        k.beginPath();
                        k.moveTo(m, m);
                        if (palette.hasOwnProperty(r)) {
                            k.fillStyle = palette[r]
                        } else {
                            k.fillStyle = palette.others
                        }
                        var q = j, p = j + s * n;
                        if (p < q) {
                            q = j
                        }
                        k.arc(m, m, m, q, p);
                        j = j + s * n;
                        k.lineTo(m, m);
                        k.fill();
                        k.closePath()
                    }
                }
            }
            k.beginPath();
            k.fillStyle = "white";
            k.arc(m, m, l, 0, Math.PI * 2);
            k.fill();
            k.closePath();
            var i = markerColor(this.trafficlight);
            if ($("#view-mode").val() === "ir") {
                k.beginPath();
                k.fillStyle = i[0];
                k.arc(m, m, m - 7, 0, Math.PI * 2);
                k.fill();
                k.closePath()
            }
            k.fillStyle = ($("#view-mode").val() === "ir") ? i[1] : "#555";
            k.textAlign = "center";
            k.textBaseline = "middle";
            k.font = "bold 12px sans-serif";
            k.fillText(this.population, m, m, o)
        }
    });
    e.BuildLeafletCluster = function (k, j) {
        var i = new L.Marker(j, {icon: e.BuildLeafletClusterIcon(k)});
        i.on("dblclick", function () {
            clearTimeout(timer);
            prevent = true;
            resetPlots();
            var o = e.Cluster.FindMarkersInArea(k.bounds);
            var m = e.Cluster.ComputeBounds(o);
            if (m) {
                var p = new L.LatLngBounds(new L.LatLng(m.minLat, m.maxLng), new L.LatLng(m.maxLat, m.minLng));
                var l = e._map.getZoom();
                var n = e._map.getBoundsZoom(p, false, new L.Point(20, 20, null));
                if (n === l) {
                    e._map.fire("overlappingmarkers", {cluster: e, markers: o, center: i.getLatLng(), marker: i})
                } else {
                    e._map.fitBounds(p)
                }
            }
        });
        i.on("click", function () {
            removeHighlight(i);
            highlightMarker(i);
            timer = setTimeout(function () {
                if (!prevent) {
                    var m = [];
                    var p = k.stats;
                    for (var o in p) {
                        m.push({
                            label: o.replace(/sensu lato/, "sl").replace(/chromosomal form/, "cf"),
                            value: p[o],
                            color: (palette[o] ? palette[o] : "#000000")
                        })
                    }
                    if ($("#sidebar").hasClass("collapsed")) {
                        sidebar.open($(".sidebar-pane.active").attr("id"))
                    }
                    updatePieChart(k.population, m);
                    var n = e.Cluster.FindMarkersInArea(k.bounds);
                    var l = e.Cluster.ComputeBounds(n);
                    if (l) {
                        var q = new L.LatLngBounds(new L.LatLng(l.minLat, l.maxLng), new L.LatLng(l.maxLat, l.minLng))
                    }
                    createBeeViolinPlot("#swarm-chart-area", buildBbox(q));
                    updateTable("#table-contents", buildBbox(q))
                }
            }, delay);
            prevent = false
        });
        i.on("mouseover", function (l) {
        });
        return i
    };
    var h = geohashLevel(f, "geohash");
    var d;
    if (g === 0) {
        d = "(";
        for (var c = 0; c < smallClusters.length; c++) {
            if (c === smallClusters.length - 1) {
                d += smallClusters[c];
                break
            }
            d += smallClusters[c] + " "
        }
        d += ")"
    } else {
        d = "*"
    }
    var b = function (i) {
        var o = i.response.docs;
        for (var l in o) {
            if (o.hasOwnProperty(l)) {
                var n = o[l].geo_coords.split(",");
                var m = ($("#view-mode").val() === "ir") ? o[l].phenotype_rescaled_value_f : -1;
                var j = new PruneCluster.Marker(n[0], n[1]);
                j.data.id = o[l].id;
                if (o[l].hasOwnProperty("species_category")) {
                    var k = o[l].species_category[0];
                    j.category = o[l].species_category[0];
                    j.weight = m
                } else {
                    console.log(l + ": no species defined")
                }
                j.data.icon = L.VectorMarkers.icon({
                    prefix: "fa",
                    icon: "circle",
                    markerColor: palette[k] ? palette[k] : "red",
                    iconColor: markerColor(m)[0]
                });
                e.RegisterMarker(j)
            }
        }
        if (g) {
            assetLayerGroup.clearLayers();
            $("#markersCount").html(i.response.numFound + " samples in current view")
        }
        assetLayerGroup.addLayer(e);
        map.spin(false)
    };
    var a = solrPopbioUrl + $("#view-mode").val() + "Markers?" + qryUrl + "&fq=" + h + ":" + d + buildBbox(map.getBounds()) + "&json.wrf=?&callback=?";
    map.spin(true);
    $.getJSON(a, b)
}
function buildBbox(d) {
    var e;
    if (d.getEast()) {
        var c = d.getSouth();
        if (c < -90) {
            c = -90
        }
        var f = d.getNorth();
        if (f > 90) {
            f = 90
        }
        var a = d.getWest();
        if (a < -180) {
            a = -180
        }
        if (a > 180) {
            a = 180
        }
        var b = d.getEast();
        if (b > 180) {
            b = 180
        }
        if (b < -180) {
            b = -180
        }
        e = "&fq=geo_coords:[" + c + "," + a + " TO " + f + "," + b + "]"
    } else {
        e = "&fq=geo_coords:[-90,-180 TO 90, 180]"
    }
    return (e)
}
function geohashLevel(b, a) {
    var c;
    if (a === "geohash") {
        switch (b) {
            case 1:
            case 2:
                c = "geohash_1";
                break;
            case 3:
            case 4:
            case 5:
                c = "geohash_2";
                break;
            case 6:
            case 7:
                c = "geohash_3";
                break;
            case 8:
            case 9:
                c = "geohash_4";
                break;
            case 10:
            case 11:
                c = "geohash_5";
                break;
            default:
                c = "geohash_6";
                break
        }
    } else {
    }
    return (c)
}
function buildPalette(k, j, b) {
    var f = [];
    var e = ["#FFB300", "#803E75", "#FF6800", "#A6BDD7", "#C10020", "#CEA262", "#817066", "#007D34", "#F6768E", "#00538A", "#FF7A5C", "#53377A", "#FF8E00", "#B32851", "#F4C800", "#7F180D", "#93AA00", "#593315", "#F13A13", "#232C16"];
    var p = ["#575757", "#A0A0A0", "#FFFFFF", "#2A4BD7", "#1D6914", "#814A19", "#8126C0", "#9DAFFF", "#81C57A", "#E9DEBB", "#AD2323", "#29D0D0", "#FFEE33", "#FF9233", "#FFCDF3"];
    var d = k.length, n = d;
    for (var h = 0; h < j; h++) {
        if (typeof(k[h]) !== "undefined") {
            var o = k[h][0];
            f[o] = e[h];
            d--
        }
    }
    var m = 0.5 / d, a = 0.7;
    for (var l = 0; l < d; l++) {
        var g = n - d + l;
        var o = k[g][0];
        f[o] = colorLuminance("#FFFFFF", -a);
        a -= m
    }
    f.others = "radial-gradient(" + colorLuminance("#FFFFFF", -0.7) + ", " + colorLuminance("#FFFFFF", -a) + ")";
    f.Unknown = "black";
    return f
}
function sortHashByValue(c) {
    var b = [];
    for (var a in c) {
        b.push([a, c[a]])
    }
    b.sort(function (e, d) {
        return d[1] - e[1]
    });
    return b
}
function updatePieChart(a, b) {
    if (b) {
        $("#pie-chart-header").empty();
        d3.select("#pie-chart-area svg").attr("width", "380px").attr("height", "500px").style({
            width: "380px",
            height: "500px"
        });
        nv.addGraph(function () {
            var c = nv.models.pieChart().x(function (e) {
                return e.label
            }).y(function (e) {
                return e.value
            }).color(function (e) {
                return e.data.color
            }).showLabels(true).labelThreshold(0.05).labelType("percent").donut(true).donutRatio(0.5).growOnHover(false);
            d3.select("#pie-chart-area svg").datum(b).transition().duration(800).call(c);
            nv.utils.windowResize(c.update);
            return c
        })
    } else {
    }
}
$.fn.redraw = function () {
    $(this).each(function () {
        var a = this.offsetHeight
    })
};
function updateTable(e, b, i) {
    var d = e + "-header";
    $(d).empty();
    if ($("#view-mode").val() === "smpl") {
        var a = "http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/smplTable?&" + qryUrl + b + "&sort=id asc&json.wrf=?&callback=?"
    } else {
        var a = "http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/irTable?&" + qryUrl + b + "&sort=id asc&json.wrf=?&callback=?"
    }
    var f = a + "&cursorMark=*", c = "*", g;
    PaneSpin("marker-table", "start");
    var h = this;
    $(e).empty();
    $("#marker-table").infiniteScrollHelper("destroy");
    $.getJSON(f).done(function (k) {
        if (k.response.numFound && k.response.numFound > 0) {
            var l = k.response.docs;
            g = k.nextCursorMark;
            f = a + "&cursorMark=" + g;
            tableHtml(e, l)
        }
        PaneSpin("marker-table", "stop");
        var j;
        $("#marker-table").infiniteScrollHelper({
            bottomBuffer: 80, loadMore: function (n, m) {
                PaneSpin("marker-table", "start");
                $.getJSON(f).done(function (o) {
                    if (o.response.numFound && o.response.numFound > 0) {
                        var p = o.response.docs;
                        c = g;
                        g = o.nextCursorMark;
                        f = a + "&cursorMark=" + g;
                        tableHtml(e, p)
                    }
                    PaneSpin("marker-table", "stop");
                    m()
                }).fail(function () {
                    PaneSpin("marker-table", "stop");
                    console.log("Failed while loading smplTable");
                    m()
                })
            }
        })
    }).fail(function () {
        PaneSpin("marker-table", "stop");
        console.log("Failed while loading smplTable")
    })
}
function tableHtml(b, a) {
    a.forEach(function (h) {
        var c = h.collection_date;
        var f;
        if (c && c.length > 1) {
            var d = new Date(c[0]), i = new Date(c[1]);
            f = d.toDateString() + "-" + i.toDateString()
        } else {
            if (c && c.length > 0) {
                var e = new Date(c[0]);
                f = e.toDateString()
            }
        }
        var k = h.species_category ? h.species_category[0] : "Unknown";
        if ($("#view-mode").val() === "smpl") {
            var l = {
                accession: h.accession,
                bundleName: h.bundle_name,
                url: h.url,
                sampleType: h.sample_type,
                geoCoords: h.geo_coords,
                geolocation: h.geolocations[0],
                species: k,
                bgColor: palette[k],
                textColor: getContrastYIQ(palette[k]),
                collectionDate: f,
                projects: h.projects,
                collectionProtocols: h.collection_protocols
            };
            var j = $.templates("#smplRowTemplate")
        } else {
            var l = {
                accession: h.accession,
                bundleName: h.bundle_name,
                url: h.url,
                sampleType: h.sample_type,
                geoCoords: h.geo_coords,
                geolocation: h.geolocations[0],
                species: k,
                bgColor: palette[k],
                textColor: getContrastYIQ(palette[k]),
                collectionDate: f,
                projects: h.projects,
                collectionProtocols: h.collection_protocols,
                protocols: h.protocols,
                phenotypeValue: h.phenotype_value_f,
                phenotypeValueType: h.phenotype_value_type_s,
                phenotypeValueUnit: h.phenotype_value_unit_s,
                insecticide: h.insecticide_s,
                sampleSize: h.sample_size_i,
                concentration: h.concentration_f,
                concentrationUnit: h.concentration_unit_s,
                duration: h.duration_f,
                durationUnit: h.duration_unit_s
            };
            var j = $.templates("#irRowTemplate")
        }
        var g = j.render(l);
        $(b).append(g)
    })
}
function colorLuminance(e, a) {
    e = String(e).replace(/[^0-9a-f]/gi, "");
    if (e.length < 6) {
        e = e[0] + e[0] + e[1] + e[1] + e[2] + e[2]
    }
    a = a || 0;
    var b = "#", f, d;
    for (d = 0; d < 3; d++) {
        f = parseInt(e.substr(d * 2, 2), 16);
        f = Math.round(Math.min(Math.max(0, f + (f * a)), 255)).toString(16);
        b += ("00" + f).substr(f.length)
    }
    return b
}
function filterMarkers(j) {
    if (j.length === 0) {
        qryUrl = "q=*";
        loadSolr({clear: 1, zoomLevel: map.getZoom()});
        return
    }
    var f = {};
    j.forEach(function (i) {
        if (!f.hasOwnProperty(i.type)) {
            f[i.type] = []
        }
        if (i.qtype == "exact") {
            f[i.type].push({field: i.field, value: '"' + i.value + '"'})
        } else {
            f[i.type].push({field: i.field, value: "*" + i.value + "*"})
        }
    });
    var g = 0;
    qryUrl = "q=(";
    var c = Object.keys(f).length;
    for (var e in f) {
        var a = {};
        var d = 0;
        var h = f[e];
        h.sort(function (k, i) {
            if (k.field < i.field) {
                return -1
            }
            if (k.field > i.field) {
                return 1
            }
            return 0
        }).forEach(function (k, i) {
            a[k.field] ? a[k.field] += " OR " + k.value : a[k.field] = k.value
        });
        var b = Object.keys(a).length;
        if (g < c - 1) {
            if (d < b - 1) {
                if (e === "Anywhere") {
                    qryUrl += "(" + a.anywhere + ") AND "
                } else {
                    qryUrl += "(";
                    for (var l in a) {
                        qryUrl += l + ":(" + a[l] + ")";
                        if (d === b - 1) {
                            qryUrl += ") AND ";
                            continue
                        }
                        qryUrl += " OR ";
                        d++
                    }
                }
            } else {
                if (e === "Anywhere") {
                    qryUrl += "(" + a.anywhere + ") AND "
                } else {
                    for (var l in a) {
                        qryUrl += l + ":(" + a[l] + ")";
                        if (d === b - 1) {
                            qryUrl += " AND ";
                            continue
                        }
                        qryUrl += " OR ";
                        d++
                    }
                }
            }
        } else {
            if (d < b - 1) {
                if (e === "Anywhere") {
                } else {
                    qryUrl += "(";
                    for (var l in a) {
                        qryUrl += l + ":(" + a[l] + ")";
                        if (d === b - 1) {
                            qryUrl += "))";
                            continue
                        }
                        qryUrl += " OR ";
                        d++
                    }
                }
            } else {
                if (e === "Anywhere") {
                    qryUrl += "(" + a.anywhere + "))"
                } else {
                    for (var l in a) {
                        qryUrl += l + ":(" + a[l] + "))"
                    }
                }
            }
            d++
        }
        g++
    }
    qryUrl = encodeURI(qryUrl);
    loadSolr({clear: 1, zoomLevel: map.getZoom()})
}
function mapTypeToField(a) {
    switch (a) {
        case"Taxonomy":
            return "species_cvterms";
        case"Title":
            return "label";
        case"Sample type":
            return "sample_type";
        case"Geography":
            return "geolocations_cvterms";
        case"Collection protocols":
            return "collection_protocols_cvterms";
        case"Protocols":
            return "protocols_cvterms";
        case"Stable ID":
            return "id";
        case"Insecticides":
            return "insecticide_cvterms";
        default:
            return a.toLowerCase()
    }
}
function mapTypeToIcon(a) {
    switch (a) {
        case"Taxonomy":
            return '<i class="fa fa-sitemap"></i>';
        case"Title":
            return '<i class="fa fa-info-circle"></i>';
        default:
            return '<i class="fa fa-camera-retro"></i>'
    }
}
function generatePalette(q) {
    var l = q.facet_counts.facet_pivot["geohash_2,species_category"];
    var i = [];
    for (var d in l) {
        if (l.hasOwnProperty(d)) {
            var g = l[d].count;
            var o = l[d].pivot;
            for (var j in o) {
                if (o.hasOwnProperty(j)) {
                    var h = o[j].count / g;
                    var p = o[j].value;
                    var f = parseInt(j);
                    var n;
                    switch (f) {
                        case 1:
                            n = 7 * h;
                            break;
                        case 2:
                            n = 3 * h;
                            break;
                        case 3:
                            n = 1 * h;
                            break;
                        default:
                            n = 0;
                            break
                    }
                    if (i.hasOwnProperty(p)) {
                        i[p] += n
                    } else {
                        i[p] = n
                    }
                }
            }
        }
    }
    var k = sortHashByValue(i);
    palette = buildPalette(k, legendSpecies, 1);
    var e = "";
    var m = 1;
    for (var c in palette) {
        if (m > legendSpecies - 1) {
            e += '<i style="background:' + palette.others + '"></i> Others<br />';
            $("#legend").html(e);
            break
        }
        var b = c.replace(/^(\w{2})\S+\s(\w+)/, "$1. $2");
        e += '<i style="background:' + palette[c] + '" title="' + c + '"></i> ' + (c ? "<em>" + b + "</em><br>" : "+");
        m++
    }
    if ($("#view-mode").val() === "ir") {
        e += '<div class="data-layer-legend" style="border: 0">';
        e += "<p>Resistance</p>";
        e += '<div class="min-value" style="border: 0">Low</div>';
        e += '<div class="scale-bars">';
        var a = L.ColorBrewer.Diverging.RdYlBu[10].slice();
        $.each(a.reverse(), function (r, s) {
            e += '<i style="margin: 0; border-radius: 0; border: 0; color: ' + s + "; width: 10px; background-color: " + s + ' ;"></i>'
        });
        e += '</div><div class="max-value" style="border: 0">High</div></div><p style="font-size: smaller; word-wrap: break-word; width: 200px; margin-top: 20px">Values have been rescaled globally and only give a relative indication of resistance/susceptibility</p>'
    }
    legend.onAdd = function (r) {
        legendDiv.innerHTML = e;
        return legendDiv
    };
    if (L.DomUtil.hasClass(legendDiv, "active")) {
        legend.removeFrom(map);
        legend.addTo(map)
    }
    loadSolr({clear: 1, zoomLevel: map.getZoom()})
}
function PaneSpin(c, b) {
    var a = document.getElementById(c);
    if (b === "start") {
        if (PaneSpinner == null) {
            PaneSpinner = new Spinner().spin(a)
        } else {
            PaneSpinner.spin(a)
        }
    } else {
        PaneSpinner.stop(a)
    }
}
function highlightMarker(a) {
    $(a._icon).addClass("highlight-marker");
    highlight = a
}
function removeHighlight(a) {
    if (highlight !== null) {
        $(highlight._icon).removeClass("highlight-marker");
        a ? highlight = a : highlight = null
    }
}
function resetPlots() {
    var b, c, a;
    if (highlight !== null) {
        b = '<h3>Sample summary data</h3><div id="pie-chart-header" style="text-align: center; margin-top: 30px"><i class="fa fa-pie-chart" style="color: #2c699e; font-size: 12em"></i><h3>click a marker</h3></div><div id="pie-chart-area"><svg></svg></div>';
        c = '<div style="text-align: center; margin-top: 30px"><i class="fa fa-area-chart" style="color: #2c699e; font-size: 12em"></i><h3>click a marker</h3></div>';
        a = '<div style="text-align: center; margin-top: 30px"><i class="fa fa-th-list" style="color: #2c699e; font-size: 12em"></i><h3>click a marker</h3></div>'
    } else {
        b = '<h3>Sample summary data</h3><div id="pie-chart-header" style="text-align: center; margin-top: 30px"><i class="fa fa-pie-chart" style="color: #2c699e; font-size: 12em"></i><h1>Go on!</h1><h3>click a marker</h3><h3>to plot some real data</h3> </div><div id="pie-chart-area"><svg></svg></div>';
        c = '<div style="text-align: center; margin-top: 30px"><i class="fa fa-area-chart" style="color: #2c699e; font-size: 12em"></i><h1>Go on!</h1><h3>click a marker</h3><h3>to plot some real data</h3> </div>';
        a = '<div style="text-align: center; margin-top: 30px"><i class="fa fa-th-list" style="color: #2c699e; font-size: 12em"></i><h1>Go on!</h1><h3>click a marker</h3><h3>to see some real data</h3> </div>'
    }
    $("#graphs").html(b);
    $("#swarm-chart-area").html(c);
    $("#marker-table").off("scroll");
    $("#table-contents-header").html(a);
    $("#table-contents").empty()
}
function markerColor(b) {
    var c, a;
    if (b < 0) {
        return ["white", "#555"]
    } else {
        c = trafficLight.evaluate(b);
        if (b < 0.3) {
            a = "#fff"
        } else {
            if (b > 0.7) {
                a = "#fff"
            } else {
                a = "#555"
            }
        }
        return [c, a]
    }
}
function getContrastYIQ(f) {
    var d = parseInt(f.substr(0, 2), 16);
    var c = parseInt(f.substr(2, 2), 16);
    var a = parseInt(f.substr(4, 2), 16);
    var e = ((d * 299) + (c * 587) + (a * 114)) / 1000;
    return (e >= 128) ? "black" : "white"
}
String.prototype.capitalizeFirstLetter = function () {
    return this.charAt(0).toUpperCase() + this.slice(1)
};
Number.prototype.roundDecimals = function (a) {
    if (Math.floor(this.valueOf()) === this.valueOf()) {
        return this.valueOf()
    }
    var b = this.toString().split(".")[1].length;
    if (b < a) {
        return this.valueOf()
    } else {
        return this.valueOf().toFixed(a)
    }
};