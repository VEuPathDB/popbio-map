function addViolin(i, h, e, c, a, d, f, g) {
    var l, o = ((a[1] - a[0]) / d) / 2;
    var k = d3.scale.linear().range([c / 2, 0]).domain([0, Math.max(d3.max(h, function (p) {
        return p.count * 1.5
    }))]);
    if (g) {
        l = d3.scale.log().range(e).domain(a).nice();
        console.log("Printing log in violin")
    } else {
        l = d3.scale.linear().range(e).domain(a).nice()
    }
    console.log("Now printing scaled violin area data");
    var b = d3.svg.area().interpolate(f).x(function (p) {
        return l(p.val + o)
    }).y0(c / 2).y1(function (p) {
        return k(p.count)
    });
    var n = d3.svg.line().interpolate(f).x(function (p) {
        return l(p.val + o)
    }).y(function (p) {
        return k(p.count)
    });
    var m = i.append("g");
    var j = i.append("g");
    m.append("path").datum(h).attr("class", "area").attr("d", b);
    m.append("path").datum(h).attr("class", "violin").attr("d", n);
    j.append("path").datum(h).attr("class", "area").attr("d", b);
    j.append("path").datum(h).attr("class", "violin").attr("d", n);
    m.attr("transform", "rotate(90,0,0)  translate(0,-" + c + ")");
    j.attr("transform", "rotate(90,0,0) scale(1,-1)")
}
function addBoxPlot(h, e, p, d, b, a, q, f) {
    if (f) {
        var l = d3.scale.log().range(d).domain(a).nice();
        console.log("Printing log in boxplot")
    } else {
        var l = d3.scale.linear().range(d).domain(a).nice()
    }
    var m = d3.scale.linear().range([0, b]);
    var c = 0.5 - q / 2;
    var o = 0.5 + q / 2;
    var j = [0.05, 0.25, 0.5, 0.75, 0.95];
    for (var g = 0; g < j.length; g++) {
        j[g] = l(e[g])
    }
    var r = h.append("g");
    r.append("rect").attr("class", "boxplot fill").attr("x", m(c)).attr("width", m(o) - m(c)).attr("y", j[3]).attr("height", -j[3] + j[1]);
    var n = [0, 2, 4];
    var k = ["", "median", ""];
    for (var g = 0; g < n.length; g++) {
        r.append("line").attr("class", "boxplot " + k[g]).attr("x1", m(c)).attr("x2", m(o)).attr("y1", j[n[g]]).attr("y2", j[n[g]])
    }
    n = [[0, 1], [3, 4]];
    for (g = 0; g < n.length; g++) {
        r.append("line").attr("class", "boxplot").attr("x1", m(0.5)).attr("x2", m(0.5)).attr("y1", j[n[g][0]]).attr("y2", j[n[g][1]])
    }
    r.append("rect").attr("class", "boxplot").attr("x", m(c)).attr("width", m(o) - m(c)).attr("y", j[3]).attr("height", -j[3] + j[1]);
    r.append("circle").attr("class", "boxplot mean").attr("cx", m(0.5)).attr("cy", l(p)).attr("r", m(q / 5))
}
function addBeeswarm(e, j, c, b, a, f, d) {
    var g, k = d3.select("#beeSwarmTooltip");
    if (d) {
        g = d3.scale.log().range(c).domain(a).nice()
    } else {
        g = d3.scale.linear().range(c).domain(a).nice()
    }
    var h = d3.scale.linear().range(b).domain(f).nice();
    var i = e.append("g");
    j.swarm.forEach(function (o, n) {
        var m = j.data[n].species, l = j.data[n].insecticide;
        i.append("circle").attr("cx", h(o.x)).attr("cy", g(o.y)).attr("r", 4).style("fill", palette[m]).on("mouseover", function (p) {
            k.transition().duration(200).style("opacity", 1);
            k.html(m + "<br/> (" + l + ": " + j.data[n].y + ")").style("left", (d3.event.pageX + 5) + "px").style("top", (d3.event.pageY - 28) + "px")
        }).on("mouseout", function (p) {
            k.transition().duration(500).style("opacity", 0)
        })
    })
}
function createBeeViolinPlot(e, b, d) {
    if ($("#view-mode").val() === "smpl") {
        return
    }
    var a = this;
    var c = "http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/irViolinStats?&" + qryUrl + b + "&json.wrf=?&callback=?";
    $(e).empty();
    $.getJSON(c).done(function (g) {
        if (g.facets.count && g.facets.count > 0) {
            var f = $("<select />").attr("id", "bgPlotType");
            $("<option/>", {text: "Phenotypes matching search", value: 1}).appendTo(f);
            $("<option/>", {text: "Phenotypes visible on map", value: 2}).appendTo(f);
            $("<option/>", {text: "All phenotypes", value: 3}).appendTo(f);
            f.appendTo($(e));
            var h = $("<select />").attr("id", "plotType");
            g.facets.vtypes.buckets.forEach(function (k) {
                var j = 0;
                k.vunits.buckets.forEach(function (l) {
                    var m = k.val + " (" + l.val + "): " + l.count + " phenotypes";
                    $("<option/>", {
                        text: m,
                        value: l.val,
                        data: {
                            phenotype_value_type_s: k.val,
                            phenotype_value_unit_s: l.val,
                            count: l.count,
                            min: l.pmin,
                            max: l.pmax
                        }
                    }).appendTo(h)
                })
            });
            h.appendTo($(e));
            var i = h.find(":selected").data();
            buildPlot(e, b, i);
            h.change(function () {
                i = h.find(":selected").data();
                buildPlot(e, b, i)
            });
            f.change(function () {
                i = h.find(":selected").data();
                buildPlot(e, b, i)
            })
        }
    }).fail(function () {
        console.log("Failed while loading irViolinStats")
    })
}
function buildPlot(b, i, v) {
    var c = v.count, o = v.min, r = v.max, g = v.phenotype_value_type_s, s = v.phenotype_value_unit_s;
    var m = 380, j = 300;
    var l = d3.select(b);
    var p = 25, f = "basis";
    var t = {pmin: "min(phenotype_value_f)", pmax: "max(phenotype_value_f)"};
    var d = buildBbox(map.getBounds());
    if (d3.select("#beeViolinPlot")) {
        d3.select("#beeViolinPlot").remove()
    }
    var k = l.append("svg").attr("style", "width: 380px; height: 500px; border: 0; padding-top:20px").attr("id", "beeViolinPlot");
    var e = 150, q = 10;
    var h = {top: 30, bottom: 30, left: 30, right: 20};
    var n, u;
    switch ($("#bgPlotType").val()) {
        case"1":
            u = "http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/irViolin?&" + qryUrl + '&fq=phenotype_value_type_s:"' + g + '"&fq=phenotype_value_unit_s:"' + s + '"&json.facet=' + JSON.stringify(t) + "&json.wrf=?&callback=?";
            break;
        case"2":
            u = "http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/irViolin?&" + qryUrl + d + '&fq=phenotype_value_type_s:"' + g + '"&fq=phenotype_value_unit_s:"' + s + '"&json.facet=' + JSON.stringify(t) + "&json.wrf=?&callback=?";
            break;
        case"3":
            u = 'http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/irViolin?&q=*&fq=phenotype_value_type_s:"' + g + '"&fq=phenotype_value_unit_s:"' + s + '"&json.facet=' + JSON.stringify(t) + "&json.wrf=?&callback=?";
            break;
        default:
            break
    }
    $.getJSON(u).done(function (z) {
        var y = z.response.numFound, A = z.facets.pmin, x = z.facets.pmax;
        if (s === "percent") {
            A = 0;
            x = 100
        }
        t = {
            pmean: "avg(phenotype_value_f)",
            pperc: "percentile(phenotype_value_f,5,25,50,75,95)",
            pmin: "min(phenotype_value_f)",
            pmax: "max(phenotype_value_f)",
            denplot: {type: "range", field: "phenotype_value_f", gap: (x - A) / p, start: A, end: x}
        };
        switch ($("#bgPlotType").val()) {
            case"1":
                n = "http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/irBeeswarm?&" + qryUrl + '&fq=phenotype_value_type_s:"' + g + '"&fq=phenotype_value_unit_s:"' + s + '"&json.wrf=?&callback=?';
                u = "http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/irViolin?&" + qryUrl + '&fq=phenotype_value_type_s:"' + g + '"&fq=phenotype_value_unit_s:"' + s + '"&json.facet=' + JSON.stringify(t) + "&json.wrf=?&callback=?";
                break;
            case"2":
                n = "http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/irBeeswarm?&" + qryUrl + d + '&fq=phenotype_value_type_s:"' + g + '"&fq=phenotype_value_unit_s:"' + s + '"&json.wrf=?&callback=?';
                u = "http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/irViolin?&" + qryUrl + d + '&fq=phenotype_value_type_s:"' + g + '"&fq=phenotype_value_unit_s:"' + s + '"&json.facet=' + JSON.stringify(t) + "&json.wrf=?&callback=?";
                break;
            case"3":
                n = 'http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/irBeeswarm?&q=*&fq=phenotype_value_type_s:"' + g + '"&fq=phenotype_value_unit_s:"' + s + '"&json.wrf=?&callback=?';
                u = 'http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/irViolin?&q=*&fq=phenotype_value_type_s:"' + g + '"&fq=phenotype_value_unit_s:"' + s + '"&json.facet=' + JSON.stringify(t) + "&json.wrf=?&callback=?";
                break;
            default:
                break
        }
        var w = $.getJSON(u);
        w.done(function (U) {
            var V = k.append("g").attr("transform", "translate(" + (0 * (e + q) + h.left) + ",0)");
            var T = U.response.numFound, H = U.facets.pmin, J = U.facets.pmax;
            if (s === "percent") {
                H = 0;
                J = 100
            }
            var Q = [H, J];
            var G, F, B, C = e / 2, K, L;
            var N, D, M, P;
            a(Q);
            if (T > 50) {
                if (U.facets.count > 0) {
                    N = U.facets.denplot.buckets;
                    D = U.facets.pmean;
                    M = U.facets.pperc;
                    P = U.facets.count;
                    addViolin(V, N, [j - h.bottom, h.top], e, Q, p, f, false);
                    addBoxPlot(V, M, D, [j - h.bottom, h.top], e, Q, 0.15, false)
                }
            } else {
                if (T >= 10 && T <= 50) {
                    var O = $.getJSON(n);
                    O.fail(function () {
                        console.log("Failed while loading irBeeswarm")
                    });
                    O.done(function (W) {
                        if (W.grouped.phenotype_value_type_s.matches > 0) {
                            F = W.grouped.phenotype_value_type_s.groups[0];
                            C = e / 2;
                            G = [];
                            K = 4 * (r - o) / e;
                            F.doclist.docs.forEach(function (Y, X) {
                                G.push({
                                    x: undefined,
                                    y: Y.phenotype_value_f,
                                    species: Y.species_category[0],
                                    insecticide: Y.insecticide_s
                                })
                            });
                            B = new Beeswarm(G, 0, K);
                            L = [(e - 8 * B.maxPoints) / 2, (e - 8 * B.maxPoints) / 2 + 8 * B.maxPoints];
                            if (8 * B.maxPoints > e) {
                                L = [0, e]
                            }
                            addBeeswarm(V, B, [j - h.bottom, h.top], L, Q, B.domain, false)
                        }
                        if (U.facets.count > 0) {
                            N = U.facets.denplot.buckets;
                            D = U.facets.pmean;
                            M = U.facets.pperc;
                            P = U.facets.count;
                            addBoxPlot(V, M, D, [j - h.bottom, h.top], e, Q, 0.15, false)
                        }
                    })
                } else {
                    var O = $.getJSON(n);
                    O.fail(function () {
                        console.log("Failed while loading irBeeswarm")
                    });
                    O.done(function (W) {
                        if (W.grouped.phenotype_value_type_s.matches > 0) {
                            F = W.grouped.phenotype_value_type_s.groups[0];
                            G = [];
                            K = 4 * (r - o) / e;
                            F.doclist.docs.forEach(function (Y, X) {
                                G.push({
                                    x: undefined,
                                    y: Y.phenotype_value_f,
                                    species: Y.species_category[0],
                                    insecticide: Y.insecticide_s
                                })
                            });
                            B = new Beeswarm(G, 0, K);
                            L = [(e - 8 * B.maxPoints) / 2, (e - 8 * B.maxPoints) / 2 + 8 * B.maxPoints];
                            if (8 * B.maxPoints > e) {
                                L = [0, e]
                            }
                            addBeeswarm(V, B, [j - h.bottom, h.top], L, Q, B.domain, false)
                        }
                    })
                }
            }
            var I = "http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/irBeeswarm?&" + qryUrl + '&fq=phenotype_value_type_s:"' + g + '"&fq=phenotype_value_unit_s:"' + s + '"' + i + "&json.wrf=?&callback=?";
            var S = "http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/irViolin?&" + qryUrl + '&fq=phenotype_value_type_s:"' + g + '"&fq=phenotype_value_unit_s:"' + s + '"&json.facet=' + JSON.stringify(t) + i + "&json.wrf=?&callback=?";
            var E = $.getJSON(I), R = $.getJSON(S);
            $.when(E, R).done(function (ad, X) {
                var Z = k.append("g").attr("transform", "translate(" + (1 * (e + q) + h.left) + ",0)");
                var ac, aa, ag, ah = e / 2, ab, W;
                var af, Y, ai, ae;
                if (c > 50) {
                    if (X[0].facets.count > 0) {
                        af = X[0].facets.denplot.buckets;
                        Y = X[0].facets.pmean;
                        ai = X[0].facets.pperc;
                        ae = X[0].facets.count;
                        addViolin(Z, af, [j - h.bottom, h.top], e, Q, p, f, false);
                        addBoxPlot(Z, ai, Y, [j - h.bottom, h.top], e, Q, 0.15, false)
                    }
                } else {
                    if (c >= 10 && c <= 50) {
                        if (ad[0].grouped.phenotype_value_type_s.matches > 0) {
                            aa = ad[0].grouped.phenotype_value_type_s.groups[0];
                            ah = e / 2;
                            ac = [];
                            ab = 4 * (r - o) / e;
                            aa.doclist.docs.forEach(function (ak, aj) {
                                ac.push({
                                    x: undefined,
                                    y: ak.phenotype_value_f,
                                    species: ak.species_category[0],
                                    insecticide: ak.insecticide_s
                                })
                            });
                            ag = new Beeswarm(ac, 0, ab);
                            W = [(e - 8 * ag.maxPoints) / 2, (e - 8 * ag.maxPoints) / 2 + 8 * ag.maxPoints];
                            if (8 * ag.maxPoints > e) {
                                W = [0, e]
                            }
                            addBeeswarm(Z, ag, [j - h.bottom, h.top], W, Q, ag.domain, false)
                        }
                        if (X[0].facets.count > 0) {
                            af = X[0].facets.denplot.buckets;
                            Y = X[0].facets.pmean;
                            ai = X[0].facets.pperc;
                            ae = X[0].facets.count;
                            addBoxPlot(Z, ai, Y, [j - h.bottom, h.top], e, Q, 0.15, false)
                        }
                    } else {
                        if (ad[0].grouped.phenotype_value_type_s.matches > 0) {
                            aa = ad[0].grouped.phenotype_value_type_s.groups[0];
                            ac = [];
                            ab = 4 * (r - o) / e;
                            aa.doclist.docs.forEach(function (ak, aj) {
                                ac.push({
                                    x: undefined,
                                    y: ak.phenotype_value_f,
                                    species: ak.species_category[0],
                                    insecticide: ak.insecticide_s
                                })
                            });
                            ag = new Beeswarm(ac, 0, ab);
                            W = [(e - 8 * ag.maxPoints) / 2, (e - 8 * ag.maxPoints) / 2 + 8 * ag.maxPoints];
                            if (8 * ag.maxPoints > e) {
                                W = [0, e]
                            }
                            addBeeswarm(Z, ag, [j - h.bottom, h.top], W, Q, ag.domain, false)
                        }
                    }
                }
            });
            E.fail(function () {
                console.log("Failed while loading irBeeswarm")
            });
            R.fail(function () {
                console.log("Failed while loading irViolin")
            })
        });
        w.fail(function () {
            console.log("Failed while loading irViolin")
        })
    }).fail(function () {
        console.log("Failed while loading irViolin")
    });
    function a(x) {
        var y = d3.scale.linear().range([j - h.bottom, h.top]).domain(x).nice();
        var w = d3.svg.axis().scale(y).orient("left");
        k.append("g").attr("class", "axis").attr("transform", "translate(" + h.left + ",0)").call(w);
        k.append("text").attr("x", h.left + e + q / 2).attr("y", 10).style("text-anchor", "middle").text(g.capitalizeFirstLetter());
        k.append("text").attr("x", h.left + e / 2).attr("y", j - h.bottom / 2).style("text-anchor", "middle").text("Background");
        k.append("text").attr("x", h.left + e + q + e / 2).attr("y", j - h.bottom / 2).style("text-anchor", "middle").text("Selection")
    }
};