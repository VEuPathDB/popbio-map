function addViolin(h, g, i, b, e, c, d, f) {
    var o = (e[1] / c) / 2;
    var k = d3.scale.linear().range([b / 2, 0]).domain([0, Math.max(d3.max(g, function (p) {
        return p.count * 1.5
    }))]);
    if (f) {
        var l = d3.scale.log().range(i).domain(e).nice();
        console.log("Printing log in violin")
    } else {
        var l = d3.scale.linear().range(i).domain(e).nice()
    }
    console.log("Now printing scaled violin area data");
    var a = d3.svg.area().interpolate(d).x(function (p) {
        if (d == "step-before") {
            return l(p.val + o)
        }
        console.log("*" + p.val + ":" + l(p.val));
        return l(p.val)
    }).y0(b / 2).y1(function (p) {
        return k(p.count)
    });
    var n = d3.svg.line().interpolate(d).x(function (p) {
        if (d == "step-before") {
            return l(p.val + o)
        }
        return l(p.val)
    }).y(function (p) {
        return k(p.count)
    });
    var m = h.append("g");
    var j = h.append("g");
    m.append("path").datum(g).attr("class", "area").attr("d", a);
    m.append("path").datum(g).attr("class", "violin").attr("d", n);
    j.append("path").datum(g).attr("class", "area").attr("d", a);
    j.append("path").datum(g).attr("class", "violin").attr("d", n);
    var l = b;
    m.attr("transform", "rotate(90,0,0)  translate(0,-" + b + ")");
    j.attr("transform", "rotate(90,0,0) scale(1,-1)")
}
function addBoxPlot(g, c, p, h, a, d, q, e) {
    if (e) {
        var l = d3.scale.log().range(h).domain(d).nice();
        console.log("Printing log in boxplot")
    } else {
        var l = d3.scale.linear().range(h).domain(d).nice()
    }
    var m = d3.scale.linear().range([0, a]);
    var b = 0.5 - q / 2;
    var o = 0.5 + q / 2;
    var j = [0.05, 0.25, 0.5, 0.75, 0.95];
    for (var f = 0; f < j.length; f++) {
        j[f] = l(c[f])
    }
    var r = g.append("g");
    r.append("rect").attr("class", "boxplot fill").attr("x", m(b)).attr("width", m(o) - m(b)).attr("y", j[3]).attr("height", -j[3] + j[1]);
    var n = [0, 2, 4];
    var k = ["", "median", ""];
    for (var f = 0; f < n.length; f++) {
        r.append("line").attr("class", "boxplot " + k[f]).attr("x1", m(b)).attr("x2", m(o)).attr("y1", j[n[f]]).attr("y2", j[n[f]])
    }
    n = [[0, 1], [3, 4]];
    for (f = 0; f < n.length; f++) {
        r.append("line").attr("class", "boxplot").attr("x1", m(0.5)).attr("x2", m(0.5)).attr("y1", j[n[f][0]]).attr("y2", j[n[f][1]])
    }
    r.append("rect").attr("class", "boxplot").attr("x", m(b)).attr("width", m(o) - m(b)).attr("y", j[3]).attr("height", -j[3] + j[1]);
    r.append("circle").attr("class", "boxplot mean").attr("cx", m(0.5)).attr("cy", l(p)).attr("r", m(q / 5));
    r.append("circle").attr("class", "boxplot mean").attr("cx", m(0.5)).attr("cy", l(p)).attr("r", m(q / 10))
}
function addBeeswarm(d, i, e, a, b, c) {
    var j;
    if (d3.select("#beeSwarmTooltip").empty) {
        j = d3.select("body").append("div").attr("class", "tooltip").attr("id", "beeSwarmTooltip").style("opacity", 0)
    } else {
        j = d3.select("#beeSwarmTooltip")
    }
    if (c) {
        var f = d3.scale.log().range(e).domain(b).nice()
    } else {
        var f = d3.scale.linear().range(e).domain(b).nice()
    }
    var g = d3.scale.linear().range([0, a]).domain(b).nice();
    var h = d.append("g");
    i.swarm.forEach(function (n, m) {
        var l = i.data[m].species, k = i.data[m].insecticide;
        h.append("circle").attr("cx", n.x).attr("cy", f(n.y)).attr("r", 4).style("fill", palette[l]).on("mouseover", function (o) {
            j.transition().duration(200).style("opacity", 0.9);
            j.html(l + "<br/> (" + k + ": " + i.data[m].y + ")").style("left", (d3.event.pageX + 5) + "px").style("top", (d3.event.pageY - 28) + "px")
        }).on("mouseout", function (o) {
            j.transition().duration(500).style("opacity", 0)
        })
    })
}
function createBeeViolinPlot(h, c, f) {
    if ($("#view-mode").val() === "smpl") {
        return
    }
    var b = this;
    var e = 280;
    var a = 300;
    var d = "http://vb-dev.bio.ic.ac.uk:7997/solr/vb_popbio/irViolinStats?&" + qryUrl + c + "&json.wrf=?&callback=?";
    console.log(c);
    console.log(f);
    function g(i) {
        $(h).empty();
        if (i.facets.count && i.facets.count > 0) {
            var j = $("<select />").attr("id", "plotType");
            i.facets.vtypes.buckets.forEach(function (m) {
                var l = 0;
                m.vunits.buckets.forEach(function (n) {
                    var o = m.val + " (" + n.val + "): " + n.count + " phenotypes";
                    $("<option/>", {
                        text: o,
                        value: n.val,
                        data: {
                            phenotype_value_type_s: m.val,
                            phenotype_value_unit_s: n.val,
                            count: n.count,
                            min: n.pmin,
                            max: n.pmax
                        }
                    }).appendTo(j)
                })
            });
            j.appendTo($(h));
            var k = j.find(":selected").data();
            buildPlot(h, c, k);
            j.change(function () {
                k = j.find(":selected").data();
                buildPlot(h, c, k)
            })
        }
    }

    $.getJSON(d, g).fail(function () {
        console.log("Failed while loading irViolinStats")
    })
}
function buildPlot(e, o, C) {
    var j = C.count, t = C.min, w = C.max, m = C.phenotype_value_type_s, A = C.phenotype_value_unit_s;
    var s = 250, p = 300;
    var r = d3.select(e);
    if (d3.select("#beeViolinPlot")) {
        d3.select("#beeViolinPlot").remove()
    }
    var q = r.append("svg").attr("style", "width: 400px; height: 500px; border: 0; padding-top:20px").attr("id", "beeViolinPlot");
    var D, k = 100, v = 10;
    var n = {top: 30, bottom: 30, left: 30, right: 20};
    var f = "http://vb-dev.bio.ic.ac.uk:7997/solr/vb_popbio/irBeeswarm?&" + qryUrl + '&fq=phenotype_value_type_s:"' + m + '"&fq=phenotype_value_unit_s:"' + A + '"' + o + "&json.wrf=?&callback=?";
    console.log(f);
    var z = q.append("g").attr("transform", "translate(" + (0 * (k + v) + n.left) + ",0)");

    function a() {
        var i = d3.scale.linear().range([p - n.bottom, n.top]).domain(D).nice();
        var g = d3.svg.axis().scale(i).orient("left");
        q.append("text").attr("x", n.left + k + v / 2).attr("y", 10).style("text-anchor", "middle").text("Selection");
        q.append("text").attr("x", n.left + k / 2).attr("y", 290).style("text-anchor", "middle").text("Background")
    }

    if (j > 1000) {
        D = [t, w]
    } else {
        D = [t, w];
        function B(F) {
            if (F.grouped.phenotype_value_type_s.matches > 0) {
                var E = F.grouped.phenotype_value_type_s.groups[0];
                var i, H = k / 2, g = 4, G = [];
                E.doclist.docs.forEach(function (J, I) {
                    console.log(J.phenotype_value_f);
                    G.push({x: 1, y: J.phenotype_value_f, species: J.species_category[0], insecticide: J.insecticide_s})
                });
                i = new Beeswarm(G, H, g);
                a();
                addBeeswarm(z, i, [270, 30], k, D, false)
            }
        }

        $.getJSON(f, B).fail(function () {
            console.log("Failed while loading irViolinStats")
        })
    }
    return;
    var b, h = 100, u = 10, y = 300, c = k / 2, d = 4, l = [], x;
    for (x = 0; x < h; ++x) {
        l.push({x: 1, y: Math.floor(Math.random() * (y - u + 1)) + u})
    }
    b = new Beeswarm(l, c, d);
    addBeeswarm(z, b.swarm, [270, 30], k, D, false)
}
function Violin(b, o) {
    var n = this;
    var d = 250;
    var l = 300;
    var c, f, e, h, m, j, g, k, i;
    this.divback = b.attr("class", "popup-back").attr("id", "violin-popup-back");
    this.div = this.divback.append("div").attr("id", "violin-popup").attr("class", "popup").append("div").attr("class", "violin-div").attr("id", "violin");
    var a = '/solr/ninjadata/select?q={!join from=member_ids to=id}analysis_id:"AnOrthoMap-v1.01"&rows=0&wt=json&json.nl=map&json.facet={evorMean:"avg(evo_rate_f)",evoPerc:"percentile(evo_rate_f,5,25,50,75,95)",duplMean:"avg(avg_para_count_f)",duplPerc:"percentile(avg_para_count_f,5,25,50,75,95)",univMean:"avg(frac_species_f)",univPerc:"percentile(frac_species_f,5,25,50,75,95)",evor: {range : {field:evo_rate_f, start:0, end:4, gap:0.13}},dupl: {range : {field:avg_para_count_f, start:1, end:31, gap:1.03}},univ: {range : {field:frac_species_f, start:0, end:1, gap:0.033}}}';
    console.log(a);
    d3.json(a, function (p, q) {
        if (p) {
            return console.warn(p)
        }
        if (defined(q.facets.count) && q.facets.count > 0) {
            c = q.facets.evor.buckets;
            f = q.facets.evorMean;
            e = q.facets.evoPerc;
            h = q.facets.dupl.buckets;
            m = q.facets.duplMean;
            j = q.facets.duplPerc;
            g = q.facets.univ.buckets;
            k = q.facets.univMean;
            i = q.facets.univPerc
        }
    });
    this.comm.ready(this);
    this.comm.on("violin.violin" + this.id, function (r) {
        if (!r || !r.source || r.source == n || !r.object) {
            return
        }
        if (!/^MZ.+/.test(r.object.branchset[0].name)) {
            return
        }
        var s = r.object.branchset[0].x, q = r.object.branchset[0].y;
        console.log("lakis:" + r.object.branchset[0].x);
        var p = '/solr/ninjadata/select?rows=0&wt=json&json.nl=map&q={!join from=member_ids to=id} analysis_id:"AnOrthoMap-v1.01" AND type:cluster AND x_coord_i:' + s + " AND y_coord_i:" + q + '&json.facet={evorMean:"avg(evo_rate_f)",evoPerc:"percentile(evo_rate_f,5,25,50,75,95)",duplMean:"avg(avg_para_count_f)",duplPerc:"percentile(avg_para_count_f,5,25,50,75,95)",univMean:"avg(frac_species_f)",univPerc:"percentile(frac_species_f,5,25,50,75,95)",evor: {range : {field:evo_rate_f, start:0, end:4, gap:0.13}},dupl: {range : {field:avg_para_count_f, start:1, end:31, gap:1.03}},univ: {range : {field:frac_species_f, start:0, end:1, gap:0.033}}}';
        console.log(p);
        d3.json(p, function (D, J) {
            if (D) {
                return console.warn(D)
            }
            if (defined(J.facets.count) && J.facets.count > 0) {
                n.div.selectAll("*").remove();
                n.div.append("div").attr("class", "cancel").on("click", function () {
                    d3.select("#violin-popup-back").style("display", "none")
                });
                var v = {top: 30, bottom: 30, left: 30, right: 20};
                var y = 100;
                var F = 10;
                var w = [0, 4];
                var t = 20;
                var E = "violin";
                var u = "basis";
                var C = d3.scale.linear().range([l - v.bottom, v.top]).domain(w).nice();
                var I = d3.svg.axis().scale(C).orient("left");
                var x = n.div.append("svg").attr("style", "width: 32%; height: 100%; border: 0");
                x.append("text").attr("x", v.left + y + F / 2).attr("y", 10).style("text-anchor", "middle").text("Evolutionary Rate");
                x.append("text").attr("x", v.left + y / 2).attr("y", 290).style("text-anchor", "middle").text("All");
                x.append("text").attr("x", v.left + y + F + y / 2).attr("y", 290).style("text-anchor", "middle").text("Cluster");
                var A = x.append("g").attr("transform", "translate(" + (0 * (y + F) + v.left) + ",0)");
                addViolin(A, c, [l - v.bottom, v.top], y, w, t, u, 0.25, false);
                addBoxPlot(A, e, f, [l - v.bottom, v.top], y, w, 0.15, false);
                A = x.append("g").attr("transform", "translate(" + (1 * (y + F) + v.left) + ",0)");
                addViolin(A, J.facets.evor.buckets, [l - v.bottom, v.top], y, w, t, u, 0.25, false);
                addBoxPlot(A, J.facets.evoPerc, J.facets.evorMean, [l - v.bottom, v.top], y, w, 0.15, false);
                x.append("g").attr("class", "axis").attr("transform", "translate(" + v.left + ",0)").call(I);
                w = [1, 31];
                var z = d3.scale.log().range([l - v.bottom, v.top]).domain(w).nice();
                var G = d3.svg.axis().scale(z).orient("left").ticks(3, ",.1s").tickSize(6, 0);
                x = n.div.append("svg").attr("style", "width: 32%; height: 100%; border: 0");
                x.append("text").attr("x", v.left + y + F / 2).attr("y", 10).style("text-anchor", "middle").text("Duplicability");
                x.append("text").attr("x", v.left + y / 2).attr("y", 290).style("text-anchor", "middle").text("All");
                x.append("text").attr("x", v.left + y + F + y / 2).attr("y", 290).style("text-anchor", "middle").text("Cluster");
                A = x.append("g").attr("transform", "translate(" + (0 * (y + F) + v.left) + ",0)");
                addViolin(A, h, [l - v.bottom, v.top], y, w, t, u, 0.25, true);
                addBoxPlot(A, j, m, [l - v.bottom, v.top], y, w, 0.15, true);
                A = x.append("g").attr("transform", "translate(" + (1 * (y + F) + v.left) + ",0)");
                addViolin(A, J.facets.dupl.buckets, [l - v.bottom, v.top], y, w, t, u, 0.25, true);
                addBoxPlot(A, J.facets.duplPerc, J.facets.duplMean, [l - v.bottom, v.top], y, w, 0.15, true);
                x.append("g").attr("class", "axis").attr("transform", "translate(" + v.left + ",0)").call(G);
                w = [0, 1];
                var B = d3.scale.linear().range([l - v.bottom, v.top]).domain(w).nice();
                var H = d3.svg.axis().scale(B).orient("left");
                x = n.div.append("svg").attr("style", "width: 32%; height: 100%; border: 0");
                x.append("text").attr("x", v.left + y + F / 2).attr("y", 10).style("text-anchor", "middle").text("Universality");
                x.append("text").attr("x", v.left + y / 2).attr("y", 290).style("text-anchor", "middle").text("All");
                x.append("text").attr("x", v.left + y + F + y / 2).attr("y", 290).style("text-anchor", "middle").text("Cluster");
                A = x.append("g").attr("transform", "translate(" + (0 * (y + F) + v.left) + ",0)");
                addViolin(A, g, [l - v.bottom, v.top], y, w, t, u, 0.25, false);
                addBoxPlot(A, i, k, [l - v.bottom, v.top], y, w, 0.15, false);
                A = x.append("g").attr("transform", "translate(" + (1 * (y + F) + v.left) + ",0)");
                addViolin(A, J.facets.univ.buckets, [l - v.bottom, v.top], y, w, t, u, 0.25, false);
                addBoxPlot(A, J.facets.univPerc, J.facets.univMean, [l - v.bottom, v.top], y, w, 0.15, false);
                x.append("g").attr("class", "axis").attr("transform", "translate(" + v.left + ",0)").call(H);
                d3.select("#violin-popup-back").style("display", "block")
            }
        })
    })
};