function addViolin(l, m, p, n, o, q, i, c) {
    var j = m.length - 1;
    var r = m[j].count, e = m[j].val;
    var f, h = (o[1] - o[0]) / q;
    m.push({val: e + h, count: r});
    var d = d3.scale.linear().range([n / 2, 0]).domain([0, Math.max(d3.max(m, function (v) {
        return v.count * 1.5
    }))]);
    var a = d3.select("#beeSwarmTooltip");
    if (c) {
        f = d3.scale.log().range(p).domain(o).nice()
    } else {
        f = d3.scale.linear().range(p).domain(o).nice()
    }
    var b = l.append("circle").attr("r", 7).style("display", "none").style("fill", "#FFFFFF").style("pointer-events", "none").style("stroke", "#FB5050").style("stroke-width", "3px");
    var u = d3.bisector(function (v) {
        return v.val
    }).left;
    var s = d3.svg.area().interpolate(i).x(function (v) {
        return f(v.val)
    }).y0(n / 2).y1(function (v) {
        return d(v.count)
    });
    var g = d3.svg.line().interpolate(i).x(function (v) {
        return f(v.val)
    }).y(function (v) {
        return d(v.count)
    });
    var k = l.append("g");
    var t = l.append("g");
    k.append("path").datum(m).attr("class", "area").attr("d", s).on("mouseover", function () {
        a.transition().duration(200).style("opacity", 1)
    }).on("mouseout", function (v) {
        a.transition().duration(500).style("opacity", 0)
    }).on("mousemove", function (C) {
        var w = d3.mouse(this);
        var B = f.invert(w[0]), v = u(C, B);
        var A = C.length - 1;
        if (v === 0) {
            var y = "Range: " + C[v].val.roundDecimals(4) + "-" + (C[v].val + h).roundDecimals(4);
            var z = C[v].count
        } else {
            if (v < A) {
                var y = "Range: " + C[v - 1].val.roundDecimals(4) + "-" + (C[v - 1].val + h).roundDecimals(4);
                var z = C[v - 1].count
            } else {
                var y = "Range: " + C[A - 1].val.roundDecimals(4) + "-" + (C[A - 1].val + h).roundDecimals(4);
                var z = C[A - 1].count
            }
        }
        var x = '<h3 style="background-color: #CCCCCC;"><font color="white">Count of phenotypes</font></h3><p>%BIN</p><p><b>%COUNT</b></p>'.replace("%BIN", y).replace("%COUNT", z);
        a.html(x).style("left", (d3.event.pageX + 5) + "px").style("top", (d3.event.pageY - 28) + "px")
    });
    k.append("path").datum(m).attr("class", "violin").attr("d", g);
    t.append("path").datum(m).attr("class", "area").attr("d", s).on("mouseover", function () {
        a.transition().duration(200).style("opacity", 1)
    }).on("mouseout", function (v) {
        a.transition().duration(500).style("opacity", 0)
    }).on("mousemove", function (C) {
        var w = d3.mouse(this);
        var B = f.invert(w[0]), v = u(C, B);
        var A = C.length - 1;
        if (v === 0) {
            var y = "Range: " + C[v].val.roundDecimals(4) + "-" + (C[v].val + h).roundDecimals(4);
            var z = C[v].count
        } else {
            if (v < A) {
                var y = "Range: " + C[v - 1].val.roundDecimals(4) + "-" + (C[v - 1].val + h).roundDecimals(4);
                var z = C[v - 1].count
            } else {
                var y = "Range: " + C[A - 1].val.roundDecimals(4) + "-" + (C[A - 1].val + h).roundDecimals(4);
                var z = C[A - 1].count
            }
        }
        var x = '<h3 style="background-color: #CCCCCC;"><font color="white">Count of phenotypes</font></h3><p>%BIN</p><p><b>%COUNT</b></p>'.replace("%BIN", y).replace("%COUNT", z);
        a.html(x).style("left", (d3.event.pageX + 5) + "px").style("top", (d3.event.pageY - 28) + "px")
    });
    t.append("path").datum(m).attr("class", "violin").attr("d", g);
    k.attr("transform", "rotate(90,0,0)  translate(0,-" + n + ")");
    t.attr("transform", "rotate(90,0,0) scale(1,-1)")
}
function addBoxPlot(k, j, u, o, l, m, n, e) {
    var c = d3.select("#beeSwarmTooltip");
    if (e) {
        var g = d3.scale.log().range(o).domain(m).nice();
        console.log("Printing log in boxplot")
    } else {
        var g = d3.scale.linear().range(o).domain(m).nice()
    }
    var h = d3.scale.linear().range([0, l]);
    var b = 0.5 - n / 2;
    var s = 0.5 + n / 2;
    var f = [0.05, 0.25, 0.5, 0.75, 0.95];
    for (var p = 0; p < f.length; p++) {
        f[p] = g(j[p])
    }
    var q = k.append("g");
    q.append("rect").attr("class", "boxplot fill").attr("x", h(b)).attr("width", h(s) - h(b)).attr("y", f[3]).attr("height", -f[3] + f[1]);
    q.append("rect").attr("class", "boxplot").attr("x", h(b)).attr("width", h(s) - h(b)).attr("y", f[3]).attr("height", -f[3] + f[1]);
    var v = [[0, 1], [3, 4]];
    for (p = 0; p < v.length; p++) {
        q.append("line").attr("class", "boxplot").attr("x1", h(0.5)).attr("x2", h(0.5)).attr("y1", f[v[p][0]]).attr("y2", f[v[p][1]])
    }
    v = [0, 1, 2, 3, 4];
    var d = ["", "", "median", "", ""];
    var t = ['<h3 style="background-color: #000000"><font color="white">5th percentile</font></h3><p><b>%VALUE</b></p>', '<h3 style="background-color: #000000"><font color="white">25th percentile</font></h3><p><b>%VALUE</b></p>', '<h3 style="background-color: #ff0000"><font color="white">Median</font></h3><p><b>%VALUE</b></p>', '<h3 style="background-color: #000000"><font color="white">75th percentile</font></h3><p><b>%VALUE</b></p>', '<h3 style="background-color: #000000"><font color="white">95th percentile</font></h3><p><b>%VALUE</b></p>'];

    function r(w, i) {
        return i
    }

    for (var p = 0; p < v.length; p++) {
        (function (w) {
            var i = t[p].replace("%VALUE", j[v[p]].roundDecimals(4));
            q.append("line").attr("class", "boxplot " + d[p]).attr("x1", h(b)).attr("x2", h(s)).attr("y1", f[v[p]]).attr("y2", f[v[p]]).on("mouseover", function () {
                c.transition().duration(200).style("opacity", 1);
                c.html(i).style("left", (d3.event.pageX + 5) + "px").style("top", (d3.event.pageY - 28) + "px")
            }).on("mouseout", function (x) {
                c.transition().duration(500).style("opacity", 0)
            })
        })(p)
    }
    var a = '<h3 style="background-color: #ff0000"><font color="white">Mean</font></h3><p><b>' + u.roundDecimals(4) + "</b></p>";
    q.append("circle").attr("class", "boxplot mean").attr("cx", h(0.5)).attr("cy", g(u)).attr("r", h(n / 5)).on("mouseover", function () {
        c.transition().duration(200).style("opacity", 1);
        c.html(a).style("left", (d3.event.pageX + 5) + "px").style("top", (d3.event.pageY - 28) + "px")
    }).on("mouseout", function (i) {
        c.transition().duration(500).style("opacity", 0)
    })
}
function addBeeswarm(e, j, c, b, a, f, d) {
    var g, k = d3.select("#beeSwarmTooltip");
    if (d) {
        g = d3.scale.log().range(c).domain(a).nice()
    } else {
        g = d3.scale.linear().range(c).domain(a).nice()
    }
    var h = d3.scale.linear().range(b).domain(f).nice();
    var i = e.append("g");
    j.swarm.forEach(function (m, r) {
        var w = j.data[r];
        var z = w.species, n = w.insecticide, q = palette[z], v = w.y, s = w.concentration, t = w.concentration_unit, o = w.duration, u = w.duration_unit;
        var y = (s && t) ? "<p>Concentration: " + s + " " + t + "</p>" : "", x = (o && u) ? "<p>Duration: " + o + " " + u + "</p>" : "";
        var l = '<h3 style="background-color: %COLOR"><font color="white">%SPECIES</font></h3><p><b>%VALUE</b></p><p>%INSCT</p>'.replace("%COLOR", q).replace("%SPECIES", z).replace("%INSCT", n).replace("%VALUE", v).concat(y).concat(x);
        i.append("circle").attr("cx", h(m.x)).attr("cy", g(m.y)).attr("r", 4).style("fill", q).on("mouseover", function (p) {
            k.transition().duration(200).style("opacity", 1);
            k.html(l).style("left", (d3.event.pageX + 5) + "px").style("top", (d3.event.pageY - 28) + "px")
        }).on("mouseout", function (p) {
            k.transition().duration(500).style("opacity", 0)
        })
    })
}
function createBeeViolinPlot(d, b) {
    if ($("#view-mode").val() === "smpl") {
        $(d).html('<div style="text-align: center; margin-top: 30px"><i class="fa fa-area-chart" style="color: #C3312D; font-size: 12em"></i><h1>Ooops</h1><h3>this plot type only works with Insecticide Resistance data</h3><h4>switch to IR phenotypes view and try again</h4></div>');
        return
    }
    PaneSpin("swarm-plots", "start");
    var a = this;
    var c = "http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/irViolinStats?&" + qryUrl + b + "&json.wrf=?&callback=?";
    $(d).empty();
    $.getJSON(c).done(function (g) {
        if (g.facets.count && g.facets.count > 0) {
            var f = $("<label>").text("Phenotypes included in background: ");
            var e = $("<select />").attr("id", "bgPlotType").attr("class", "form-control");
            $("<option/>", {text: "phenotypes matching search", value: 1}).appendTo(e);
            $("<option/>", {text: "phenotypes visible on map", value: 2}).appendTo(e);
            $("<option/>", {text: "all phenotypes", value: 3}).appendTo(e);
            f.appendTo($(d));
            e.appendTo($(d));
            f = $("<label>").text("Measurement type: ");
            var h = $("<select />").attr("id", "plotType").attr("class", "form-control");
            g.facets.vtypes.buckets.forEach(function (k) {
                var j = 0;
                k.vunits.buckets.forEach(function (l) {
                    var m = k.val + " (" + l.val + "): " + l.count + " phenotypes";
                    $("<option/>", {
                        text: m,
                        value: l.val,
                        data: {
                            phenotype_value_type_s: k.val,
                            phenotype_value_unit_s: l.val,
                            count: l.count,
                            min: l.pmin,
                            max: l.pmax
                        }
                    }).appendTo(h)
                })
            });
            f.appendTo($(d));
            h.appendTo($(d));
            var i = h.find(":selected").data();
            buildPlot(d, b, i);
            h.change(function () {
                PaneSpin("swarm-plots", "start");
                i = h.find(":selected").data();
                buildPlot(d, b, i)
            });
            e.change(function () {
                PaneSpin("swarm-plots", "start");
                i = h.find(":selected").data();
                buildPlot(d, b, i)
            })
        }
    }).fail(function () {
        PaneSpin("swarm-plots", "stop");
        console.log("Failed while loading irViolinStats")
    })
}
function buildPlot(b, i, w) {
    var s, c = w.count, o = w.min, r = w.max, g = w.phenotype_value_type_s, t = w.phenotype_value_unit_s;
    var m = 380, j = 500;
    var l = d3.select(b);
    var p = 25, f = "basis";
    var u = {pmin: "percentile(phenotype_value_f,1)", pmax: "percentile(phenotype_value_f,99)"};
    var d = buildBbox(map.getBounds());
    if (d3.select("#beeViolinPlot")) {
        d3.select("#beeViolinPlot").remove()
    }
    var k = l.append("svg").attr("style", "width: 380px; height: 500px; border: 0; padding-top:10px").attr("id", "beeViolinPlot");
    var e = 150, q = 10;
    var h = {top: 25, bottom: 50, left: 40, right: 20};
    var n, v;
    switch ($("#bgPlotType").val()) {
        case"1":
            v = "http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/irViolin?&" + qryUrl + '&fq=phenotype_value_type_s:"' + g + '"&fq=phenotype_value_unit_s:"' + t + '"&json.facet=' + JSON.stringify(u) + "&json.wrf=?&callback=?";
            break;
        case"2":
            v = "http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/irViolin?&" + qryUrl + d + '&fq=phenotype_value_type_s:"' + g + '"&fq=phenotype_value_unit_s:"' + t + '"&json.facet=' + JSON.stringify(u) + "&json.wrf=?&callback=?";
            break;
        case"3":
            v = 'http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/irViolin?&q=*&fq=phenotype_value_type_s:"' + g + '"&fq=phenotype_value_unit_s:"' + t + '"&json.facet=' + JSON.stringify(u) + "&json.wrf=?&callback=?";
            break;
        default:
            break
    }
    $.getJSON(v).done(function (z) {
        s = z.response.numFound;
        var A = z.facets.pmin, y = z.facets.pmax;
        if (t === "percent" && g === "mortality rate") {
            A = 0;
            y = 100
        }
        u = {
            pmean: "avg(phenotype_value_f)",
            pperc: "percentile(phenotype_value_f,5,25,50,75,95)",
            pmin: "percentile(phenotype_value_f,1)",
            pmax: "percentile(phenotype_value_f,99)",
            denplot: {type: "range", field: "phenotype_value_f", gap: (y - A) / p, start: A, end: y, include: "edge"}
        };
        switch ($("#bgPlotType").val()) {
            case"1":
                n = "http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/irBeeswarm?&" + qryUrl + '&fq=phenotype_value_type_s:"' + g + '"&fq=phenotype_value_unit_s:"' + t + '"&json.wrf=?&callback=?';
                v = "http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/irViolin?&" + qryUrl + '&fq=phenotype_value_type_s:"' + g + '"&fq=phenotype_value_unit_s:"' + t + '"&json.facet=' + JSON.stringify(u) + "&json.wrf=?&callback=?";
                break;
            case"2":
                n = "http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/irBeeswarm?&" + qryUrl + d + '&fq=phenotype_value_type_s:"' + g + '"&fq=phenotype_value_unit_s:"' + t + '"&json.wrf=?&callback=?';
                v = "http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/irViolin?&" + qryUrl + d + '&fq=phenotype_value_type_s:"' + g + '"&fq=phenotype_value_unit_s:"' + t + '"&json.facet=' + JSON.stringify(u) + "&json.wrf=?&callback=?";
                break;
            case"3":
                n = 'http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/irBeeswarm?&q=*&fq=phenotype_value_type_s:"' + g + '"&fq=phenotype_value_unit_s:"' + t + '"&json.wrf=?&callback=?';
                v = 'http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/irViolin?&q=*&fq=phenotype_value_type_s:"' + g + '"&fq=phenotype_value_unit_s:"' + t + '"&json.facet=' + JSON.stringify(u) + "&json.wrf=?&callback=?";
                break;
            default:
                break
        }
        var x = $.getJSON(v);
        x.done(function (U) {
            var V = k.append("g").attr("transform", "translate(" + (0 * (e + q) + h.left) + ",0)");
            var T = U.response.numFound, H = U.facets.pmin, J = U.facets.pmax;
            if (t === "percent" && g === "mortality rate") {
                H = 0;
                J = 100
            }
            var Q = [H, J];
            var G, F, B, C = e / 2, K, L;
            var N, D, M, P;
            a(Q, T, c);
            if (T > 50) {
                if (U.facets.count > 0) {
                    N = U.facets.denplot.buckets;
                    D = U.facets.pmean;
                    M = U.facets.pperc;
                    P = U.facets.count;
                    addViolin(V, N, [j - h.bottom, h.top], e, Q, p, f, false);
                    addBoxPlot(V, M, D, [j - h.bottom, h.top], e, Q, 0.15, false)
                }
            } else {
                if (T >= 10 && T <= 50) {
                    var O = $.getJSON(n);
                    O.fail(function () {
                        console.log("Failed while loading irBeeswarm")
                    });
                    O.done(function (W) {
                        if (W.grouped.phenotype_value_type_s.matches > 0) {
                            F = W.grouped.phenotype_value_type_s.groups[0];
                            C = e / 2;
                            G = [];
                            K = 4 * (r - o) / e;
                            F.doclist.docs.forEach(function (Y, X) {
                                G.push({
                                    x: undefined,
                                    y: Y.phenotype_value_f,
                                    species: Y.species_category[0],
                                    insecticide: Y.insecticide_s,
                                    concentration: Y.concentration_f,
                                    concentration_unit: Y.concentration_unit_s,
                                    duration: Y.duration_f,
                                    duration_unit: Y.duration_unit_s
                                })
                            });
                            B = new Beeswarm(G, 0, K);
                            L = [(e - 8 * B.maxPoints) / 2, (e - 8 * B.maxPoints) / 2 + 8 * B.maxPoints];
                            if (8 * B.maxPoints > e) {
                                L = [0, e]
                            }
                            addBeeswarm(V, B, [j - h.bottom, h.top], L, Q, B.domain, false)
                        }
                        if (U.facets.count > 0) {
                            N = U.facets.denplot.buckets;
                            D = U.facets.pmean;
                            M = U.facets.pperc;
                            P = U.facets.count;
                            addBoxPlot(V, M, D, [j - h.bottom, h.top], e, Q, 0.15, false)
                        }
                    })
                } else {
                    var O = $.getJSON(n);
                    O.fail(function () {
                        console.log("Failed while loading irBeeswarm")
                    });
                    O.done(function (W) {
                        if (W.grouped.phenotype_value_type_s.matches > 0) {
                            F = W.grouped.phenotype_value_type_s.groups[0];
                            G = [];
                            K = 4 * (r - o) / e;
                            F.doclist.docs.forEach(function (Y, X) {
                                G.push({
                                    x: undefined,
                                    y: Y.phenotype_value_f,
                                    species: Y.species_category[0],
                                    insecticide: Y.insecticide_s,
                                    concentration: Y.concentration_f,
                                    concentration_unit: Y.concentration_unit_s,
                                    duration: Y.duration_f,
                                    duration_unit: Y.duration_unit_s
                                })
                            });
                            B = new Beeswarm(G, 0, K);
                            L = [(e - 8 * B.maxPoints) / 2, (e - 8 * B.maxPoints) / 2 + 8 * B.maxPoints];
                            if (8 * B.maxPoints > e) {
                                L = [0, e]
                            }
                            addBeeswarm(V, B, [j - h.bottom, h.top], L, Q, B.domain, false)
                        }
                    })
                }
            }
            var I = "http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/irBeeswarm?&" + qryUrl + '&fq=phenotype_value_type_s:"' + g + '"&fq=phenotype_value_unit_s:"' + t + '"' + i + "&json.wrf=?&callback=?";
            var S = "http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/irViolin?&" + qryUrl + '&fq=phenotype_value_type_s:"' + g + '"&fq=phenotype_value_unit_s:"' + t + '"&json.facet=' + JSON.stringify(u) + i + "&json.wrf=?&callback=?";
            var E = $.getJSON(I), R = $.getJSON(S);
            $.when(E, R).done(function (ad, X) {
                var Z = k.append("g").attr("transform", "translate(" + (1 * (e + q) + h.left) + ",0)");
                var ac, aa, ag, ah = e / 2, ab, W;
                var af, Y, ai, ae;
                if (c > 50) {
                    if (X[0].facets.count > 0) {
                        af = X[0].facets.denplot.buckets;
                        Y = X[0].facets.pmean;
                        ai = X[0].facets.pperc;
                        ae = X[0].facets.count;
                        addViolin(Z, af, [j - h.bottom, h.top], e, Q, p, f, false);
                        addBoxPlot(Z, ai, Y, [j - h.bottom, h.top], e, Q, 0.15, false)
                    }
                } else {
                    if (c >= 10 && c <= 50) {
                        if (ad[0].grouped.phenotype_value_type_s.matches > 0) {
                            aa = ad[0].grouped.phenotype_value_type_s.groups[0];
                            ah = e / 2;
                            ac = [];
                            ab = 4 * (r - o) / e;
                            aa.doclist.docs.forEach(function (ak, aj) {
                                ac.push({
                                    x: undefined,
                                    y: ak.phenotype_value_f,
                                    species: ak.species_category[0],
                                    insecticide: ak.insecticide_s,
                                    concentration: ak.concentration_f,
                                    concentration_unit: ak.concentration_unit_s,
                                    duration: ak.duration_f,
                                    duration_unit: ak.duration_unit_s
                                })
                            });
                            ag = new Beeswarm(ac, 0, ab);
                            W = [(e - 8 * ag.maxPoints) / 2, (e - 8 * ag.maxPoints) / 2 + 8 * ag.maxPoints];
                            if (8 * ag.maxPoints > e) {
                                W = [0, e]
                            }
                            addBeeswarm(Z, ag, [j - h.bottom, h.top], W, Q, ag.domain, false)
                        }
                        if (X[0].facets.count > 0) {
                            af = X[0].facets.denplot.buckets;
                            Y = X[0].facets.pmean;
                            ai = X[0].facets.pperc;
                            ae = X[0].facets.count;
                            addBoxPlot(Z, ai, Y, [j - h.bottom, h.top], e, Q, 0.15, false)
                        }
                    } else {
                        if (ad[0].grouped.phenotype_value_type_s.matches > 0) {
                            aa = ad[0].grouped.phenotype_value_type_s.groups[0];
                            ac = [];
                            ab = 4 * (r - o) / e;
                            aa.doclist.docs.forEach(function (ak, aj) {
                                ac.push({
                                    x: undefined,
                                    y: ak.phenotype_value_f,
                                    species: ak.species_category[0],
                                    insecticide: ak.insecticide_s,
                                    concentration: ak.concentration_f,
                                    concentration_unit: ak.concentration_unit_s,
                                    duration: ak.duration_f,
                                    duration_unit: ak.duration_unit_s
                                })
                            });
                            ag = new Beeswarm(ac, 0, ab);
                            W = [(e - 8 * ag.maxPoints) / 2, (e - 8 * ag.maxPoints) / 2 + 8 * ag.maxPoints];
                            if (8 * ag.maxPoints > e) {
                                W = [0, e]
                            }
                            addBeeswarm(Z, ag, [j - h.bottom, h.top], W, Q, ag.domain, false)
                        }
                    }
                }
                PaneSpin("swarm-plots", "stop")
            });
            E.fail(function () {
                console.log("Failed while loading irBeeswarm")
            });
            R.fail(function () {
                console.log("Failed while loading irViolin")
            })
        });
        x.fail(function () {
            console.log("Failed while loading irViolin")
        })
    }).fail(function () {
        console.log("Failed while loading irViolin")
    });
    function a(A, x, z) {
        var B = d3.scale.linear().range([j - h.bottom, h.top]).domain(A).nice();
        var y = d3.svg.axis().scale(B).orient("left");
        k.append("g").attr("class", "axis").attr("transform", "translate(" + h.left + ",0)").call(y);
        k.append("text").attr("x", h.left + e + q / 2).attr("y", 10).style("text-anchor", "middle").text(g.capitalizeFirstLetter());
        k.append("text").attr("x", h.left + e / 2).attr("y", j - 6 - h.bottom / 2).style("text-anchor", "middle").text("Background");
        k.append("text").attr("x", h.left + e / 2).attr("y", j - 12).style("text-anchor", "middle").text("(n=" + x + ")");
        k.append("text").attr("x", h.left + e + q + e / 2).attr("y", j - 6 - h.bottom / 2).style("text-anchor", "middle").text("Selection");
        k.append("text").attr("x", h.left + e + q + e / 2).attr("y", j - 12).style("text-anchor", "middle").text("(n=" + z + ")")
    }
};