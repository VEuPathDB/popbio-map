L.Control.Sidebar = L.Control.extend({
    includes: L.Mixin.Events, initialize: function (d, a) {
        var b, c;
        L.setOptions(this, a);
        this._sidebar = L.DomUtil.get(d);
        if (L.Browser.touch) {
            L.DomUtil.addClass(this._sidebar, "leaflet-touch")
        }
        for (b = this._sidebar.children.length - 1; b >= 0; b--) {
            c = this._sidebar.children[b];
            if (c.tagName == "UL" && L.DomUtil.hasClass(c, "sidebar-tabs")) {
                this._tabs = c
            } else {
                if (c.tagName == "DIV" && L.DomUtil.hasClass(c, "sidebar-content")) {
                    this._container = c
                }
            }
        }
        this._tabitems = [];
        for (b = this._tabs.children.length - 1; b >= 0; b--) {
            c = this._tabs.children[b];
            if (c.tagName == "LI") {
                this._tabitems.push(c);
                c._sidebar = this
            }
        }
        this._panes = [];
        for (b = this._container.children.length - 1; b >= 0; b--) {
            c = this._container.children[b];
            if (c.tagName == "DIV" && L.DomUtil.hasClass(c, "sidebar-pane")) {
                this._panes.push(c)
            }
        }
        this._hasTouchStart = L.Browser.touch && ("ontouchstart" in document.documentElement)
    }, addTo: function (c) {
        this._map = c;
        var b = this._hasTouchStart ? "touchstart" : "click";
        for (var a = this._tabitems.length - 1; a >= 0; a--) {
            var d = this._tabitems[a];
            L.DomEvent.on(d.firstChild, b, this._onClick, d)
        }
        return this
    }, removeFrom: function (c) {
        this._map = null;
        var b = this._hasTouchStart ? "touchstart" : "click";
        for (var a = this._tabitems.length - 1; a >= 0; a--) {
            var d = this._tabitems[a];
            L.DomEvent.off(d.firstChild, b, this._onClick)
        }
        return this
    }, open: function (c) {
        var a, b;
        for (a = this._panes.length - 1; a >= 0; a--) {
            b = this._panes[a];
            if (b.id == c) {
                L.DomUtil.addClass(b, "active")
            } else {
                if (L.DomUtil.hasClass(b, "active")) {
                    L.DomUtil.removeClass(b, "active")
                }
            }
        }
        for (a = this._tabitems.length - 1; a >= 0; a--) {
            b = this._tabitems[a];
            if (b.firstChild.hash == "#" + c) {
                L.DomUtil.addClass(b, "active")
            } else {
                if (L.DomUtil.hasClass(b, "active")) {
                    L.DomUtil.removeClass(b, "active")
                }
            }
        }
        this.fire("content", {id: c});
        if (L.DomUtil.hasClass(this._sidebar, "collapsed")) {
            this.fire("opening");
            L.DomUtil.removeClass(this._sidebar, "collapsed")
        }
        return this
    }, close: function () {
        for (var a = this._tabitems.length - 1; a >= 0; a--) {
            var b = this._tabitems[a];
            if (L.DomUtil.hasClass(b, "active")) {
                L.DomUtil.removeClass(b, "active")
            }
        }
        if (!L.DomUtil.hasClass(this._sidebar, "collapsed")) {
            this.fire("closing");
            L.DomUtil.addClass(this._sidebar, "collapsed")
        }
        return this
    }, _onClick: function (a) {
        if (L.DomUtil.hasClass(this, "active")) {
            this._sidebar.close()
        } else {
            this._sidebar.open(this.firstChild.hash.slice(1))
        }
    }
});
L.control.sidebar = function (b, a) {
    return new L.Control.Sidebar(b, a)
};