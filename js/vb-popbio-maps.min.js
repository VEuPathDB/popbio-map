function loadSolr(e) {
    var a = e.clear;
    var f = e.zoomLevel;
    var g = geohashLevel(f, "geohash");
    if (f > 11) {
        loadSmall(1, f);
        return
    }
    var d = [];
    var c = function (u) {
        $("#markersCount").html(u.response.numFound + " samples");
        if (u.response.numFound === 0) {
            if (a) {
                assetLayerGroup.clearLayers()
            }
            map.spin(false);
            return
        }
        var q;
        var t;
        var s;
        var h = ["#ff4b00", "#bac900", "#EC1813", "#55BCBE", "#D2204C", "#FF0000", "#ada59a", "#3e647e"];
        switch (f) {
            case 1:
            case 2:
                q = u.stats.stats_fields.geo_coords_ll_0___tdouble.facets.geohash_1;
                t = u.stats.stats_fields.geo_coords_ll_1___tdouble.facets.geohash_1;
                s = u.facet_counts.facet_pivot["geohash_1,species_category"];
                break;
            case 3:
            case 4:
            case 5:
                q = u.stats.stats_fields.geo_coords_ll_0___tdouble.facets.geohash_2;
                t = u.stats.stats_fields.geo_coords_ll_1___tdouble.facets.geohash_2;
                s = u.facet_counts.facet_pivot["geohash_2,species_category"];
                break;
            case 6:
            case 7:
                q = u.stats.stats_fields.geo_coords_ll_0___tdouble.facets.geohash_3;
                t = u.stats.stats_fields.geo_coords_ll_1___tdouble.facets.geohash_3;
                s = u.facet_counts.facet_pivot["geohash_3,species_category"];
                break;
            case 8:
            case 9:
                q = u.stats.stats_fields.geo_coords_ll_0___tdouble.facets.geohash_4;
                t = u.stats.stats_fields.geo_coords_ll_1___tdouble.facets.geohash_4;
                s = u.facet_counts.facet_pivot["geohash_4,species_category"];
                break;
            case 10:
            case 11:
                q = u.stats.stats_fields.geo_coords_ll_0___tdouble.facets.geohash_5;
                t = u.stats.stats_fields.geo_coords_ll_1___tdouble.facets.geohash_5;
                s = u.facet_counts.facet_pivot["geohash_5,species_category"];
                break;
            default:
                q = u.stats.stats_fields.geo_coords_ll_0___tdouble.facets.geohash_6;
                t = u.stats.stats_fields.geo_coords_ll_1___tdouble.facets.geohash_6;
                s = u.facet_counts.facet_pivot["geohash_6,species_category"];
                break
        }
        smallClusters = [];
        var j = [];
        var i = [];
        var p = [];
        s.forEach(function (z, x, A) {
            j[z.value] = z.count;
            var w = [];
            var v = [];
            var y = 1;
            z.pivot.forEach(function (C) {
                var B = C.value, D = C.count;
                if (y < 8) {
                    w[B] = D
                } else {
                    w.others += D
                }
                v.push({
                    label: B.replace(/sensu lato/, "sl").replace(/chromosomal form/, "cf"),
                    value: D,
                    color: (palette[B] ? palette[B] : "#000000")
                });
                ++y
            });
            i[z.value] = w;
            p[z.value] = v
        });
        for (var o in q) {
            if (q.hasOwnProperty(o)) {
                var m = q[o].count;
                if (m < 2) {
                    smallClusters.push(o);
                    continue
                }
                if (f === 3 && m < 6) {
                    smallClusters.push(o);
                    continue
                }
                if (f === 4 && m < 11) {
                    smallClusters.push(o);
                    continue
                }
                if (f === 5 && m < 21) {
                    smallClusters.push(o);
                    continue
                }
                if (f === 6 && m < 31) {
                    smallClusters.push(o);
                    continue
                }
                if (f === 7 && m < 41) {
                    smallClusters.push(o);
                    continue
                }
                if (f === 8 && m < 51) {
                    smallClusters.push(o);
                    continue
                }
                if (f === 9 && m < 61) {
                    smallClusters.push(o);
                    continue
                }
                if (f > 9 && m < 71) {
                    smallClusters.push(o);
                    continue
                }
                var k = {};
                k.term = o;
                k.count = q[o].count;
                k.latLng = [q[o].mean, t[o].mean];
                k.bounds = [[q[o].min, t[o].min], [q[o].max, t[o].max]];
                k.population = j[o];
                k.stats = i[o];
                k.fullstats = p[o];
                k.colors = h;
                d.push(k)
            }
        }
        var n = {};
        n.terms = d;
        var r = {
            recordsField: "terms",
            latitudeField: "latLng.0",
            longitudeField: "latLng.1",
            displayOptions: {
                count: {
                    title: function (v) {
                        return v
                    }
                }
            },
            layerOptions: {fill: false, stroke: false, weight: 0, color: "#80FF00", dropShadow: false},
            setIcon: function (v) {
                var w = 40;
                return new L.Icon.Canvas({
                    iconSize: new L.Point(w, w),
                    className: "prunecluster leaflet-markercluster-icon lamogio",
                    population: v.population,
                    stats: v.stats
                })
            },
            onEachRecord: function (w, v) {
                w.on("dblclick", function () {
                    map.fitBounds(v.bounds)
                });
                w.on("click", function () {
                    updatePieChart(v.population, v.fullstats)
                });
                w.on("mouseout", function () {
                })
            }
        };
        var l = new L.MarkerDataLayer(n, r);
        if (a) {
            assetLayerGroup.clearLayers();
            assetLayerGroup.addLayer(l)
        } else {
            assetLayerGroup.addLayer(l)
        }
        if (smallClusters.length > 0) {
            loadSmall(0, f)
        }
        map.spin(false)
    };
    var b = "http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/select?q=bundle_name:Sample AND has_geodata:true" + qryUrl + "&rows=0" + buildBbox(map.getBounds()) + "&fl=geo_coords&stats=true&stats.field=geo_coords_ll_0___tdouble&stats.field=geo_coords_ll_1___tdouble&stats.facet=" + g + "&facet=true&facet.limit=-1&facet.sort=count&facet.pivot.mincount=1&facet.pivot=" + g + ",species_category&wt=json&json.nl=map&json.wrf=?&callback=?";
    console.log(b);
    map.spin(true);
    $.getJSON(b, c).fail(function () {
        console.log("Ahhh");
        return
    })
}
function loadSmall(g, d) {
    var e = new PruneClusterForLeaflet(100);
    e.BuildLeafletClusterIcon = function (i) {
        var k = new L.Icon.MarkerCluster();
        k.stats = i.stats;
        k.population = i.population;
        return k
    };
    var a = ["#ff4b00", "#bac900", "#EC1813", "#55BCBE", "#D2204C", "#FF0000", "#ada59a", "#3e647e"];
    L.Icon.MarkerCluster = L.Icon.extend({
        options: {
            iconSize: new L.Point(40, 40),
            className: "prunecluster leaflet-markercluster-icon"
        }, createIcon: function () {
            var k = document.createElement("canvas");
            this._setIconStyles(k, "icon");
            var i = this.options.iconSize;
            k.width = i.x;
            k.height = i.y;
            this.draw(k.getContext("2d"), i.x, i.y);
            return k
        }, createShadow: function () {
            return null
        }, draw: function (n, l, x) {
            var s = Math.PI * 2, q = Math.PI * 1.5;
            var k = q;
            var t = this.options.iconSize.x, p = t / 2, o = t / 2.5;
            var m = 0;
            var r = 8;
            for (var w in this.stats) {
                if (this.stats.hasOwnProperty(w)) {
                    var y = this.stats[w] / this.population;
                    if (y > 0) {
                        n.beginPath();
                        n.moveTo(p, p);
                        if (palette.hasOwnProperty(w)) {
                            n.fillStyle = palette[w]
                        } else {
                            n.fillStyle = palette.others
                        }
                        var v = k + 0.14, u = k + y * s;
                        if (u < v) {
                            v = k
                        }
                        n.arc(p, p, p, v, u);
                        k = k + y * s;
                        n.lineTo(p, p);
                        n.fill();
                        n.closePath()
                    }
                    --r
                }
            }
            n.beginPath();
            n.fillStyle = "white";
            n.arc(p, p, o, 0, Math.PI * 2);
            n.fill();
            n.closePath();
            n.fillStyle = "#555";
            n.textAlign = "center";
            n.textBaseline = "middle";
            n.font = "bold 12px sans-serif";
            n.fillText(this.population, p, p, t)
        }
    });
    e.BuildLeafletCluster = function (l, k) {
        var i = new L.Marker(k, {icon: e.BuildLeafletClusterIcon(l)});
        i.on("dblclick", function () {
            var p = e.Cluster.FindMarkersInArea(l.bounds);
            var n = e.Cluster.ComputeBounds(p);
            if (n) {
                var q = new L.LatLngBounds(new L.LatLng(n.minLat, n.maxLng), new L.LatLng(n.maxLat, n.minLng));
                var m = e._map.getZoom();
                var o = e._map.getBoundsZoom(q, false, new L.Point(20, 20, null));
                if (o === m) {
                    e._map.fire("overlappingmarkers", {cluster: e, markers: p, center: i.getLatLng(), marker: i})
                } else {
                    e._map.fitBounds(q)
                }
            }
        });
        i.on("click", function () {
            var m = new Array;
            var o = l.stats;
            for (var n in o) {
                m.push({
                    label: n.replace(/sensu lato/, "sl").replace(/chromosomal form/, "cf"),
                    value: o[n],
                    color: (palette[n] ? palette[n] : "#000000")
                })
            }
            updatePieChart(l.population, m)
        });
        i.on("mouseover", function (m) {
        });
        return i
    };
    var c = geohashLevel(d, "geohash");
    var h;
    if (g === 0) {
        h = "(";
        for (var f = 0; f < smallClusters.length; f++) {
            if (f === smallClusters.length - 1) {
                h += smallClusters[f];
                break
            }
            h += smallClusters[f] + " OR "
        }
        h += ")"
    } else {
        h = "*"
    }
    var j = function (i) {
        var n = i.response.docs;
        for (var l in n) {
            if (n.hasOwnProperty(l)) {
                var m = n[l].geo_coords.split(",");
                var k = new PruneCluster.Marker(m[0], m[1]);
                if (n[l].hasOwnProperty("species_category")) {
                    k.category = n[l].species_category[0]
                }
                e.RegisterMarker(k)
            }
        }
        if (g) {
            assetLayerGroup.clearLayers()
        }
        assetLayerGroup.addLayer(e);
        map.spin(false)
    };
    var b = "http://funcgen.vectorbase.org/popbio-map-preview/asolr/solr/vb_popbio/select?q=bundle_name:Sample AND has_geodata:true" + qryUrl + "&fq=" + c + ":" + h + "&rows=10000000" + buildBbox(map.getBounds()) + "&fl=geo_coords,species_category&wt=json&json.nl=map&json.wrf=?&callback=?";
    map.spin(true);
    $.getJSON(b, j)
}
function buildBbox(d) {
    var e;
    if (d.getEast()) {
        var c = d.getSouth();
        if (c < -90) {
            c = -90
        }
        var f = d.getNorth();
        if (f > 90) {
            f = 90
        }
        var a = d.getWest();
        if (a < -180) {
            a = -180
        }
        if (a > 180) {
            a = 180
        }
        var b = d.getEast();
        if (b > 180) {
            b = 180
        }
        if (b < -180) {
            b = -180
        }
        e = "&fq=geo_coords:[" + c + "," + a + " TO " + f + "," + b + "]"
    } else {
        e = "&fq=geo_coords:[-90,-180 TO 90, 180]"
    }
    return (e)
}
function geohashLevel(b, a) {
    var c;
    if (a === "geohash") {
        switch (b) {
            case 1:
            case 2:
                c = "geohash_1";
                break;
            case 3:
            case 4:
            case 5:
                c = "geohash_2";
                break;
            case 6:
            case 7:
                c = "geohash_3";
                break;
            case 8:
            case 9:
                c = "geohash_4";
                break;
            case 10:
            case 11:
                c = "geohash_5";
                break;
            default:
                c = "geohash_6";
                break
        }
    } else {
    }
    return (c)
}
function buildPalette(k, j, b) {
    var f = [];
    var e = ["#FFB300", "#803E75", "#FF6800", "#A6BDD7", "#C10020", "#CEA262", "#817066", "#007D34", "#F6768E", "#00538A", "#FF7A5C", "#53377A", "#FF8E00", "#B32851", "#F4C800", "#7F180D", "#93AA00", "#593315", "#F13A13", "#232C16"];
    var p = ["#575757", "#A0A0A0", "#FFFFFF", "#2A4BD7", "#1D6914", "#814A19", "#8126C0", "#9DAFFF", "#81C57A", "#E9DEBB", "#AD2323", "#29D0D0", "#FFEE33", "#FF9233", "#FFCDF3"];
    var d = k.length, n = d;
    for (var h = 0; h < j; h++) {
        var o = k[h][0];
        f[o] = e[h];
        d--
    }
    var m = 0.5 / d, a = 0.7;
    for (var l = 0; l < d; l++) {
        var g = n - d + l;
        var o = k[g][0];
        f[o] = colorLuminance("#FFFFFF", -a);
        a -= m
    }
    f.others = "radial-gradient(" + colorLuminance("#FFFFFF", -0.7) + ", " + colorLuminance("#FFFFFF", -a) + ")";
    return f
}
function sortHashByValue(c) {
    var b = [];
    for (var a in c) {
        b.push([a, c[a]])
    }
    b.sort(function (e, d) {
        return d[1] - e[1]
    });
    return b
}
function updatePieChart(b, c) {
    if (c) {
        var a = 500;
        var d = $("#graphs").width();
        nv.addGraph(function () {
            var e = nv.models.pieChart().x(function (f) {
                return f.label
            }).y(function (f) {
                return f.value
            }).color(function (f) {
                return f.data.color
            }).showLabels(true).labelThreshold(0.05).labelType("percent").donut(true).donutRatio(0.5).growOnHover(false);
            d3.select("#piechart").datum(c).transition().duration(800).attr("width", d).attr("height", a).call(e);
            nv.utils.windowResize(function () {
                e.update()
            });
            return e
        })
    } else {
    }
}
$.fn.redraw = function () {
    $(this).each(function () {
        var a = this.offsetHeight
    })
};
function colorLuminance(e, a) {
    e = String(e).replace(/[^0-9a-f]/gi, "");
    if (e.length < 6) {
        e = e[0] + e[0] + e[1] + e[1] + e[2] + e[2]
    }
    a = a || 0;
    var b = "#", f, d;
    for (d = 0; d < 3; d++) {
        f = parseInt(e.substr(d * 2, 2), 16);
        f = Math.round(Math.min(Math.max(0, f + (f * a)), 255)).toString(16);
        b += ("00" + f).substr(f.length)
    }
    return b
}
function filterMarkers(b) {
    if (b.length === 0) {
        qryUrl = "";
        loadSolr({clear: 1, zoomLevel: map.getZoom()});
        return
    }
    var g = new Object;
    b.forEach(function (i) {
        if (g.hasOwnProperty(i.field)) {
            if (i.qtype == "exact") {
                g[i.field].push('"' + i.value + '"')
            } else {
                g[i.field].push(i.value + "*");
                console.log("inexact")
            }
        } else {
            g[i.field] = [];
            if (i.qtype == "exact") {
                g[i.field].push('"' + i.value + '"')
            } else {
                g[i.field].push(i.value + "*");
                console.log("inexact")
            }
        }
    });
    var d = Object.keys(g).length;
    var c = 0;
    for (var h in g) {
        var a = g[h];
        var f = "";
        var e = a.length;
        a.forEach(function (j, i) {
            if (i < e - 1) {
                f += j + " OR "
            } else {
                f += j
            }
        });
        if (c === 0) {
            qryUrl = " AND ("
        }
        if (c < d - 1) {
            if (h === "anywhere") {
                qryUrl += "(" + f + ") OR "
            } else {
                qryUrl += h + ":(" + f + ") OR "
            }
        } else {
            if (h === "anywhere") {
                qryUrl += "(" + f + "))"
            } else {
                qryUrl += h + ":(" + f + "))"
            }
        }
        console.log("lakis" + qryUrl);
        c++
    }
    loadSolr({clear: 1, zoomLevel: map.getZoom()})
}
function mapTypeToField(a) {
    switch (a) {
        case"Taxonomy":
            return "species_cvterms";
        case"Title":
            return "label";
        default:
            return a.toLowerCase()
    }
};